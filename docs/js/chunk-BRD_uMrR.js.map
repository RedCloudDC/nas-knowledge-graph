{"version":3,"file":"chunk-BRD_uMrR.js","sources":["../../src/components/GlobalSearch.js","../../src/components/AdvancedFilters.js","../../src/components/NeighborhoodExplorer.js","../../src/components/PathFinder.js"],"sourcesContent":["/**\n * Global Search Component\n * Advanced search with instant suggestions, filtering, and autocompletion\n * Optimized with throttling, debouncing, virtual scrolling, and performance monitoring\n */\n\nimport { search } from '../utils/search.js';\nimport { store } from '../core/store.js';\nimport { debounce, throttle, cancellableDebounce, frameDebounce, batchDebounce } from '../utils/debounce.js';\n\nexport class GlobalSearch {\n    constructor(containerId) {\n        this.container = document.getElementById(containerId) || document.querySelector(containerId);\n        this.searchInput = null;\n        this.suggestionsContainer = null;\n        this.currentSuggestions = [];\n        this.selectedSuggestionIndex = -1;\n        this.isOpen = false;\n\n        // Search configuration with performance optimizations\n        this.config = {\n            minQueryLength: 1,\n            maxSuggestions: 10,\n            searchDelay: 200,\n            highlightMatches: true,\n            searchScopes: ['all', 'nodes', 'edges'],\n            currentScope: 'all',\n            // Performance settings\n            maxCachedResults: 100,\n            virtualScrolling: true,\n            itemHeight: 48,\n            visibleItems: 8,\n            throttleKeyNav: 16, // ~60fps\n            batchRenderSize: 20,\n            enableMetrics: true\n        };\n\n        // Performance monitoring\n        this.searchMetrics = {\n            searchCount: 0,\n            avgSearchTime: 0,\n            totalSearchTime: 0,\n            cacheHits: 0,\n            lastSearchTime: null\n        };\n\n        // Caching and optimization\n        this.searchCache = new Map();\n        this.debounceInstances = new Map();\n        this.virtualScrollState = {\n            startIndex: 0,\n            endIndex: this.config.visibleItems\n        };\n\n        // DOM optimization\n        this.documentFragment = document.createDocumentFragment();\n        this.intersectionObserver = null;\n\n        this.init();\n        this.setupEventListeners();\n    }\n\n    /**\n     * Initialize the search component\n     */\n    init() {\n        if (!this.container) {\n            console.warn('GlobalSearch: Container not found');\n            return;\n        }\n\n        this.createSearchInterface();\n        this.setupSearch();\n    }\n\n    /**\n     * Create the search interface elements\n     */\n    createSearchInterface() {\n        // Get existing search input or create new one\n        this.searchInput = this.container.querySelector('#search-input') ||\n                          this.container.querySelector('input[type=\"search\"]');\n\n        if (!this.searchInput) {\n            // Create complete search interface if it doesn't exist\n            this.container.innerHTML = `\n                <div class=\"global-search-container\">\n                    <div class=\"search-input-wrapper\">\n                        <div class=\"search-icon\">üîç</div>\n                        <input \n                            type=\"search\" \n                            id=\"search-input\" \n                            placeholder=\"Search nodes, edges, or properties...\" \n                            autocomplete=\"off\"\n                            spellcheck=\"false\"\n                            role=\"combobox\"\n                            aria-expanded=\"false\"\n                            aria-haspopup=\"listbox\"\n                            aria-owns=\"search-suggestions\"\n                        />\n                        <div class=\"search-scope-selector\">\n                            <select id=\"search-scope\" aria-label=\"Search scope\">\n                                <option value=\"all\">All</option>\n                                <option value=\"nodes\">Nodes</option>\n                                <option value=\"edges\">Edges</option>\n                            </select>\n                        </div>\n                        <button id=\"search-clear\" type=\"button\" class=\"search-clear-btn\" aria-label=\"Clear search\">\n                            <span>‚úï</span>\n                        </button>\n                    </div>\n                    <div id=\"search-suggestions\" \n                         class=\"search-suggestions\" \n                         role=\"listbox\" \n                         aria-label=\"Search suggestions\"\n                         style=\"display: none;\">\n                    </div>\n                </div>\n            `;\n\n            this.searchInput = this.container.querySelector('#search-input');\n        }\n\n        // Create suggestions container if it doesn't exist\n        this.suggestionsContainer = this.container.querySelector('#search-suggestions');\n        if (!this.suggestionsContainer) {\n            this.suggestionsContainer = document.createElement('div');\n            this.suggestionsContainer.id = 'search-suggestions';\n            this.suggestionsContainer.className = 'search-suggestions';\n            this.suggestionsContainer.setAttribute('role', 'listbox');\n            this.suggestionsContainer.setAttribute('aria-label', 'Search suggestions');\n            this.suggestionsContainer.style.display = 'none';\n            this.container.appendChild(this.suggestionsContainer);\n        }\n\n        // Add CSS if not present\n        this.addSearchStyles();\n    }\n\n    /**\n     * Add search component styles\n     */\n    addSearchStyles() {\n        if (document.querySelector('#global-search-styles')) {return;}\n\n        const style = document.createElement('style');\n        style.id = 'global-search-styles';\n        style.textContent = `\n            .global-search-container {\n                position: relative;\n                width: 100%;\n                max-width: 500px;\n            }\n\n            .search-input-wrapper {\n                position: relative;\n                display: flex;\n                align-items: center;\n                background: white;\n                border: 2px solid #e1e8ed;\n                border-radius: 25px;\n                transition: all 0.2s ease;\n                box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            }\n\n            .search-input-wrapper:focus-within {\n                border-color: #3498db;\n                box-shadow: 0 4px 12px rgba(52,152,219,0.2);\n            }\n\n            .search-icon {\n                padding: 0 15px;\n                color: #7f8c8d;\n                font-size: 16px;\n                pointer-events: none;\n            }\n\n            #search-input {\n                flex: 1;\n                border: none;\n                outline: none;\n                padding: 12px 0;\n                font-size: 14px;\n                background: transparent;\n                color: #2c3e50;\n            }\n\n            #search-input::placeholder {\n                color: #bdc3c7;\n            }\n\n            .search-scope-selector {\n                padding-right: 8px;\n            }\n\n            #search-scope {\n                border: none;\n                background: #f8f9fa;\n                padding: 4px 8px;\n                border-radius: 12px;\n                font-size: 11px;\n                color: #7f8c8d;\n                cursor: pointer;\n                outline: none;\n            }\n\n            #search-scope:focus {\n                background: #e9ecef;\n                color: #495057;\n            }\n\n            .search-clear-btn {\n                background: none;\n                border: none;\n                padding: 8px 15px;\n                cursor: pointer;\n                color: #7f8c8d;\n                border-radius: 50%;\n                transition: all 0.2s ease;\n                display: none;\n            }\n\n            .search-clear-btn:hover {\n                background: #f8f9fa;\n                color: #e74c3c;\n            }\n\n            .search-suggestions {\n                position: absolute;\n                top: 100%;\n                left: 0;\n                right: 0;\n                background: white;\n                border: 1px solid #e1e8ed;\n                border-radius: 12px;\n                box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n                z-index: 1000;\n                max-height: 400px;\n                overflow-y: auto;\n                margin-top: 8px;\n            }\n\n            .suggestion-item {\n                padding: 12px 16px;\n                cursor: pointer;\n                border-bottom: 1px solid #f8f9fa;\n                display: flex;\n                align-items: center;\n                transition: background-color 0.2s ease;\n            }\n\n            .suggestion-item:hover,\n            .suggestion-item.selected {\n                background: #f8f9fa;\n            }\n\n            .suggestion-item:last-child {\n                border-bottom: none;\n            }\n\n            .suggestion-icon {\n                margin-right: 12px;\n                font-size: 16px;\n                width: 20px;\n                text-align: center;\n            }\n\n            .suggestion-content {\n                flex: 1;\n                min-width: 0;\n            }\n\n            .suggestion-title {\n                font-weight: 600;\n                color: #2c3e50;\n                margin-bottom: 2px;\n                word-break: break-word;\n            }\n\n            .suggestion-subtitle {\n                font-size: 12px;\n                color: #7f8c8d;\n                word-break: break-word;\n            }\n\n            .suggestion-type {\n                font-size: 10px;\n                background: #e9ecef;\n                color: #6c757d;\n                padding: 2px 6px;\n                border-radius: 8px;\n                font-weight: 500;\n                text-transform: uppercase;\n                margin-left: 8px;\n            }\n\n            .search-highlight {\n                background: #fff3cd;\n                color: #856404;\n                padding: 1px 2px;\n                border-radius: 2px;\n                font-weight: 600;\n            }\n\n            .no-suggestions {\n                padding: 16px;\n                text-align: center;\n                color: #7f8c8d;\n                font-style: italic;\n            }\n\n            .recent-searches {\n                border-bottom: 1px solid #f8f9fa;\n            }\n\n            .recent-searches-header {\n                padding: 8px 16px;\n                font-size: 11px;\n                font-weight: 600;\n                color: #7f8c8d;\n                text-transform: uppercase;\n                letter-spacing: 0.5px;\n                background: #f8f9fa;\n            }\n\n            /* Dark theme support */\n            .theme-dark .search-input-wrapper,\n            .theme-dark .search-suggestions {\n                background: #2c3e50;\n                border-color: #34495e;\n                color: #ecf0f1;\n            }\n\n            .theme-dark .search-input-wrapper:focus-within {\n                border-color: #3498db;\n            }\n\n            .theme-dark #search-input {\n                color: #ecf0f1;\n            }\n\n            .theme-dark #search-input::placeholder {\n                color: #7f8c8d;\n            }\n\n            .theme-dark .suggestion-item:hover,\n            .theme-dark .suggestion-item.selected {\n                background: #34495e;\n            }\n\n            .theme-dark .suggestion-title {\n                color: #ecf0f1;\n            }\n\n            .theme-dark #search-scope {\n                background: #34495e;\n                color: #ecf0f1;\n            }\n\n            .theme-dark .search-clear-btn:hover {\n                background: #34495e;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n\n    /**\n     * Setup search functionality with performance optimizations\n     */\n    setupSearch() {\n        // Create multiple debounced/throttled functions for different purposes\n        this.debouncedSearch = cancellableDebounce(this.performSearchOptimized.bind(this), this.config.searchDelay);\n        this.throttledKeyNav = throttle(this.updateSuggestionSelection.bind(this), this.config.throttleKeyNav);\n        this.frameBasedRender = frameDebounce(this.renderSuggestionsOptimized.bind(this));\n        this.batchProcessor = batchDebounce(this.processBatchOperations.bind(this), 50, 10);\n\n        // Initialize search index\n        this.updateSearchIndex();\n\n        // Setup intersection observer for virtual scrolling\n        this.setupVirtualScrolling();\n\n        // Initialize performance monitoring\n        if (this.config.enableMetrics) {\n            this.initPerformanceMonitoring();\n        }\n    }\n\n    /**\n     * Setup virtual scrolling for large suggestion lists\n     */\n    setupVirtualScrolling() {\n        if (!this.config.virtualScrolling) {return;}\n\n        this.intersectionObserver = new IntersectionObserver(\n            (entries) => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        this.handleVirtualScrollIntersection(entry.target);\n                    }\n                });\n            },\n            {\n                root: this.suggestionsContainer,\n                rootMargin: '50px',\n                threshold: 0.1\n            }\n        );\n    }\n\n    /**\n     * Initialize performance monitoring\n     */\n    initPerformanceMonitoring() {\n        // Log search performance periodically\n        setInterval(() => {\n            if (this.searchMetrics.searchCount > 0) {\n                console.log('Search Performance Metrics:', {\n                    totalSearches: this.searchMetrics.searchCount,\n                    avgSearchTime: Math.round(this.searchMetrics.avgSearchTime * 100) / 100 + 'ms',\n                    cacheHitRate: Math.round((this.searchMetrics.cacheHits / this.searchMetrics.searchCount) * 100) + '%',\n                    cacheSize: this.searchCache.size\n                });\n            }\n        }, 30000); // Every 30 seconds\n    }\n\n    /**\n     * Optimized search with caching and performance monitoring\n     */\n    performSearchOptimized(query) {\n        if (!query || query.length < this.config.minQueryLength) {\n            this.hideSuggestions();\n            return;\n        }\n\n        const startTime = performance.now();\n        const cacheKey = `${query}-${this.config.currentScope}`;\n\n        // Check cache first\n        if (this.searchCache.has(cacheKey)) {\n            this.searchMetrics.cacheHits++;\n            this.currentSuggestions = this.searchCache.get(cacheKey);\n            this.frameBasedRender();\n            this.showSuggestions();\n            return;\n        }\n\n        // Perform search\n        const searchOptions = {\n            searchNodes: this.config.currentScope === 'all' || this.config.currentScope === 'nodes',\n            searchEdges: this.config.currentScope === 'all' || this.config.currentScope === 'edges',\n            limit: this.config.maxSuggestions\n        };\n\n        const results = search.textSearch(query, searchOptions);\n        const suggestions = search.getSuggestions(query, this.config.maxSuggestions - results.length);\n\n        this.currentSuggestions = [\n            ...results.map(result => ({\n                type: result.type,\n                data: result.data,\n                score: result.score,\n                matchedText: query\n            })),\n            ...suggestions.map(suggestion => ({\n                type: 'suggestion',\n                text: suggestion,\n                matchedText: query\n            }))\n        ];\n\n        // Cache results if cache isn't too large\n        if (this.searchCache.size < this.config.maxCachedResults) {\n            this.searchCache.set(cacheKey, this.currentSuggestions);\n        }\n\n        // Update performance metrics\n        const searchTime = performance.now() - startTime;\n        this.searchMetrics.searchCount++;\n        this.searchMetrics.totalSearchTime += searchTime;\n        this.searchMetrics.avgSearchTime = this.searchMetrics.totalSearchTime / this.searchMetrics.searchCount;\n        this.searchMetrics.lastSearchTime = searchTime;\n\n        this.frameBasedRender();\n        this.showSuggestions();\n    }\n\n    /**\n     * Optimized rendering with virtual scrolling and batching\n     */\n    renderSuggestionsOptimized() {\n        if (this.currentSuggestions.length === 0) {\n            this.suggestionsContainer.innerHTML = `\n                <div class=\"no-suggestions\">\n                    No matches found. Try different keywords.\n                </div>\n            `;\n            return;\n        }\n\n        if (this.config.virtualScrolling && this.currentSuggestions.length > this.config.visibleItems) {\n            this.renderVirtualScrollSuggestions();\n        } else {\n            this.renderBatchedSuggestions();\n        }\n    }\n\n    /**\n     * Render suggestions with virtual scrolling for large lists\n     */\n    renderVirtualScrollSuggestions() {\n        const { startIndex, endIndex } = this.virtualScrollState;\n        const visibleSuggestions = this.currentSuggestions.slice(startIndex, endIndex);\n\n        // Create container with proper height for scrolling\n        const totalHeight = this.currentSuggestions.length * this.config.itemHeight;\n        const offsetY = startIndex * this.config.itemHeight;\n\n        this.suggestionsContainer.innerHTML = `\n            <div class=\"virtual-scroll-container\" style=\"height: ${totalHeight}px; position: relative;\">\n                <div class=\"visible-items\" style=\"transform: translateY(${offsetY}px);\">\n                    ${this.renderSuggestionItems(visibleSuggestions, startIndex)}\n                </div>\n            </div>\n        `;\n\n        // Observe visible items for intersection\n        const visibleItems = this.suggestionsContainer.querySelectorAll('.suggestion-item');\n        visibleItems.forEach(item => {\n            this.intersectionObserver?.observe(item);\n        });\n    }\n\n    /**\n     * Render suggestions in batches to avoid blocking UI\n     */\n    renderBatchedSuggestions() {\n        const batchSize = this.config.batchRenderSize;\n        const batches = [];\n\n        for (let i = 0; i < this.currentSuggestions.length; i += batchSize) {\n            batches.push(this.currentSuggestions.slice(i, i + batchSize));\n        }\n\n        // Clear container\n        this.suggestionsContainer.innerHTML = '';\n\n        // Render batches with requestAnimationFrame\n        let batchIndex = 0;\n\n        const renderNextBatch = () => {\n            if (batchIndex >= batches.length) {return;}\n\n            const batch = batches[batchIndex];\n            const batchFragment = document.createDocumentFragment();\n\n            batch.forEach((suggestion, index) => {\n                const actualIndex = batchIndex * batchSize + index;\n                const itemElement = this.createSuggestionElement(suggestion, actualIndex);\n                batchFragment.appendChild(itemElement);\n            });\n\n            this.suggestionsContainer.appendChild(batchFragment);\n            batchIndex++;\n\n            if (batchIndex < batches.length) {\n                requestAnimationFrame(renderNextBatch);\n            }\n        };\n\n        requestAnimationFrame(renderNextBatch);\n    }\n\n    /**\n     * Render suggestion items HTML\n     */\n    renderSuggestionItems(suggestions, startIndex = 0) {\n        return suggestions.map((suggestion, index) => {\n            const actualIndex = startIndex + index;\n            const icon = this.getSuggestionIcon(suggestion);\n            const title = this.getSuggestionTitle(suggestion);\n            const subtitle = this.getSuggestionSubtitle(suggestion);\n            const typeLabel = this.getSuggestionTypeLabel(suggestion);\n\n            return `\n                <div class=\"suggestion-item\" \n                     data-index=\"${actualIndex}\" \n                     role=\"option\"\n                     style=\"height: ${this.config.itemHeight}px;\">\n                    <div class=\"suggestion-icon\">${icon}</div>\n                    <div class=\"suggestion-content\">\n                        <div class=\"suggestion-title\">${title}</div>\n                        ${subtitle ? `<div class=\"suggestion-subtitle\">${subtitle}</div>` : ''}\n                    </div>\n                    ${typeLabel ? `<div class=\"suggestion-type\">${typeLabel}</div>` : ''}\n                </div>\n            `;\n        }).join('');\n    }\n\n    /**\n     * Create suggestion element as DOM node\n     */\n    createSuggestionElement(suggestion, index) {\n        const div = document.createElement('div');\n        div.className = 'suggestion-item';\n        div.dataset.index = index;\n        div.setAttribute('role', 'option');\n        div.style.height = this.config.itemHeight + 'px';\n\n        const icon = this.getSuggestionIcon(suggestion);\n        const title = this.getSuggestionTitle(suggestion);\n        const subtitle = this.getSuggestionSubtitle(suggestion);\n        const typeLabel = this.getSuggestionTypeLabel(suggestion);\n\n        div.innerHTML = `\n            <div class=\"suggestion-icon\">${icon}</div>\n            <div class=\"suggestion-content\">\n                <div class=\"suggestion-title\">${title}</div>\n                ${subtitle ? `<div class=\"suggestion-subtitle\">${subtitle}</div>` : ''}\n            </div>\n            ${typeLabel ? `<div class=\"suggestion-type\">${typeLabel}</div>` : ''}\n        `;\n\n        return div;\n    }\n\n    /**\n     * Handle virtual scroll intersection\n     */\n    handleVirtualScrollIntersection(element) {\n        const index = parseInt(element.dataset.index);\n\n        // Update virtual scroll state if needed\n        if (index <= this.virtualScrollState.startIndex + 2) {\n            // Near top, load previous items\n            this.virtualScrollState.startIndex = Math.max(0, this.virtualScrollState.startIndex - this.config.visibleItems);\n            this.virtualScrollState.endIndex = this.virtualScrollState.startIndex + this.config.visibleItems * 2;\n            this.frameBasedRender();\n        } else if (index >= this.virtualScrollState.endIndex - 2) {\n            // Near bottom, load next items\n            this.virtualScrollState.startIndex = Math.min(\n                this.currentSuggestions.length - this.config.visibleItems,\n                this.virtualScrollState.startIndex + this.config.visibleItems\n            );\n            this.virtualScrollState.endIndex = this.virtualScrollState.startIndex + this.config.visibleItems * 2;\n            this.frameBasedRender();\n        }\n    }\n\n    /**\n     * Process batch operations\n     */\n    processBatchOperations(operations) {\n        operations.forEach(operation => {\n            switch (operation.type) {\n            case 'cache-cleanup':\n                this.cleanupCache();\n                break;\n            case 'metrics-update':\n                this.updateMetrics(operation.data);\n                break;\n            case 'index-update':\n                this.updateSearchIndex();\n                break;\n            }\n        });\n    }\n\n    /**\n     * Cleanup old cache entries\n     */\n    cleanupCache() {\n        if (this.searchCache.size > this.config.maxCachedResults * 0.8) {\n            // Remove oldest entries\n            const entries = Array.from(this.searchCache.entries());\n            const toRemove = Math.floor(entries.length * 0.3);\n\n            for (let i = 0; i < toRemove; i++) {\n                this.searchCache.delete(entries[i][0]);\n            }\n        }\n    }\n\n    /**\n     * Throttled suggestion selection update\n     */\n    updateSuggestionSelectionThrottled() {\n        this.throttledKeyNav();\n    }\n\n    /**\n     * Get search performance metrics\n     */\n    getPerformanceMetrics() {\n        return {\n            ...this.searchMetrics,\n            cacheSize: this.searchCache.size,\n            cacheHitRate: this.searchMetrics.searchCount > 0 ?\n                Math.round((this.searchMetrics.cacheHits / this.searchMetrics.searchCount) * 100) : 0\n        };\n    }\n\n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        if (!this.searchInput) {return;}\n\n        // Search input events\n        this.searchInput.addEventListener('input', (e) => {\n            this.handleSearchInput(e.target.value);\n        });\n\n        this.searchInput.addEventListener('keydown', (e) => {\n            this.handleSearchKeydown(e);\n        });\n\n        this.searchInput.addEventListener('focus', () => {\n            if (this.searchInput.value.length >= this.config.minQueryLength) {\n                this.showSuggestions();\n            } else {\n                this.showRecentSearches();\n            }\n        });\n\n        this.searchInput.addEventListener('blur', (e) => {\n            // Delay hiding to allow clicking on suggestions\n            setTimeout(() => {\n                if (!this.container.contains(document.activeElement)) {\n                    this.hideSuggestions();\n                }\n            }, 150);\n        });\n\n        // Clear button\n        const clearBtn = this.container.querySelector('#search-clear');\n        if (clearBtn) {\n            clearBtn.addEventListener('click', () => {\n                this.clearSearch();\n                this.searchInput.focus();\n            });\n        }\n\n        // Search scope selector\n        const scopeSelect = this.container.querySelector('#search-scope');\n        if (scopeSelect) {\n            scopeSelect.addEventListener('change', (e) => {\n                this.config.currentScope = e.target.value;\n                if (this.searchInput.value) {\n                    this.debouncedSearch(this.searchInput.value);\n                }\n            });\n        }\n\n        // Suggestions container events\n        this.suggestionsContainer.addEventListener('click', (e) => {\n            const suggestionItem = e.target.closest('.suggestion-item');\n            if (suggestionItem) {\n                this.selectSuggestion(parseInt(suggestionItem.dataset.index));\n            }\n        });\n\n        // Global click to hide suggestions\n        document.addEventListener('click', (e) => {\n            if (!this.container.contains(e.target)) {\n                this.hideSuggestions();\n            }\n        });\n\n        // Store subscriptions\n        store.subscribe('nodes', () => this.updateSearchIndex());\n        store.subscribe('edges', () => this.updateSearchIndex());\n    }\n\n    /**\n     * Handle search input\n     */\n    handleSearchInput(query) {\n        const clearBtn = this.container.querySelector('#search-clear');\n        if (clearBtn) {\n            clearBtn.style.display = query ? 'block' : 'none';\n        }\n\n        if (query.length >= this.config.minQueryLength) {\n            this.debouncedSearch(query);\n        } else if (query.length === 0) {\n            this.showRecentSearches();\n        } else {\n            this.hideSuggestions();\n        }\n    }\n\n    /**\n     * Handle keyboard navigation in search\n     */\n    handleSearchKeydown(e) {\n        if (!this.isOpen) {return;}\n\n        switch (e.key) {\n        case 'ArrowDown':\n            e.preventDefault();\n            this.selectedSuggestionIndex = Math.min(\n                this.selectedSuggestionIndex + 1,\n                this.currentSuggestions.length - 1\n            );\n            this.updateSuggestionSelection();\n            break;\n\n        case 'ArrowUp':\n            e.preventDefault();\n            this.selectedSuggestionIndex = Math.max(\n                this.selectedSuggestionIndex - 1,\n                -1\n            );\n            this.updateSuggestionSelection();\n            break;\n\n        case 'Enter':\n            e.preventDefault();\n            if (this.selectedSuggestionIndex >= 0) {\n                this.selectSuggestion(this.selectedSuggestionIndex);\n            } else {\n                this.performDirectSearch(e.target.value);\n            }\n            break;\n\n        case 'Escape':\n            this.hideSuggestions();\n            this.searchInput.blur();\n            break;\n\n        case 'Tab':\n            if (this.selectedSuggestionIndex >= 0) {\n                e.preventDefault();\n                this.selectSuggestion(this.selectedSuggestionIndex);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Perform search and show suggestions\n     */\n    performSearch(query) {\n        if (!query || query.length < this.config.minQueryLength) {\n            this.hideSuggestions();\n            return;\n        }\n\n        // Perform search based on scope\n        const searchOptions = {\n            searchNodes: this.config.currentScope === 'all' || this.config.currentScope === 'nodes',\n            searchEdges: this.config.currentScope === 'all' || this.config.currentScope === 'edges',\n            limit: this.config.maxSuggestions\n        };\n\n        const results = search.textSearch(query, searchOptions);\n\n        // Get additional suggestions from search utility\n        const suggestions = search.getSuggestions(query, this.config.maxSuggestions - results.length);\n\n        this.currentSuggestions = [\n            ...results.map(result => ({\n                type: result.type,\n                data: result.data,\n                score: result.score,\n                matchedText: query\n            })),\n            ...suggestions.map(suggestion => ({\n                type: 'suggestion',\n                text: suggestion,\n                matchedText: query\n            }))\n        ];\n\n        this.renderSuggestions();\n        this.showSuggestions();\n    }\n\n    /**\n     * Show recent searches\n     */\n    showRecentSearches() {\n        const history = search.getSearchHistory();\n        if (history.length === 0) {\n            this.hideSuggestions();\n            return;\n        }\n\n        this.currentSuggestions = history.slice(0, 5).map(query => ({\n            type: 'recent',\n            text: query,\n            isRecent: true\n        }));\n\n        this.renderRecentSearches();\n        this.showSuggestions();\n    }\n\n    /**\n     * Render search suggestions\n     */\n    renderSuggestions() {\n        if (this.currentSuggestions.length === 0) {\n            this.suggestionsContainer.innerHTML = `\n                <div class=\"no-suggestions\">\n                    No matches found. Try different keywords.\n                </div>\n            `;\n            return;\n        }\n\n        const suggestionsHtml = this.currentSuggestions.map((suggestion, index) => {\n            const icon = this.getSuggestionIcon(suggestion);\n            const title = this.getSuggestionTitle(suggestion);\n            const subtitle = this.getSuggestionSubtitle(suggestion);\n            const typeLabel = this.getSuggestionTypeLabel(suggestion);\n\n            return `\n                <div class=\"suggestion-item\" data-index=\"${index}\" role=\"option\">\n                    <div class=\"suggestion-icon\">${icon}</div>\n                    <div class=\"suggestion-content\">\n                        <div class=\"suggestion-title\">${title}</div>\n                        ${subtitle ? `<div class=\"suggestion-subtitle\">${subtitle}</div>` : ''}\n                    </div>\n                    ${typeLabel ? `<div class=\"suggestion-type\">${typeLabel}</div>` : ''}\n                </div>\n            `;\n        }).join('');\n\n        this.suggestionsContainer.innerHTML = suggestionsHtml;\n    }\n\n    /**\n     * Render recent searches\n     */\n    renderRecentSearches() {\n        const recentHtml = `\n            <div class=\"recent-searches\">\n                <div class=\"recent-searches-header\">Recent Searches</div>\n                ${this.currentSuggestions.map((suggestion, index) => `\n                    <div class=\"suggestion-item\" data-index=\"${index}\" role=\"option\">\n                        <div class=\"suggestion-icon\">üïê</div>\n                        <div class=\"suggestion-content\">\n                            <div class=\"suggestion-title\">${suggestion.text}</div>\n                        </div>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n\n        this.suggestionsContainer.innerHTML = recentHtml;\n    }\n\n    /**\n     * Get suggestion icon based on type\n     */\n    getSuggestionIcon(suggestion) {\n        if (suggestion.isRecent) {return 'üïê';}\n        if (suggestion.type === 'suggestion') {return 'üîç';}\n        if (suggestion.type === 'edge') {return '‚ÜîÔ∏è';}\n\n        // Node icons based on node type\n        const nodeIcons = {\n            'faa_stars_terminal': 'üè¢',\n            'approach_control': 'üõ´',\n            'faa_eram_terminal': 'üì°',\n            'geographic_location': 'üìç',\n            'radar_equipment': 'üìä',\n            'communication_equipment': 'üìª',\n            'default': '‚óâ'\n        };\n\n        return suggestion.data?.type ?\n            nodeIcons[suggestion.data.type] || nodeIcons.default :\n            'üîç';\n    }\n\n    /**\n     * Get suggestion title with highlighting\n     */\n    getSuggestionTitle(suggestion) {\n        if (suggestion.type === 'suggestion' || suggestion.isRecent) {\n            return this.highlightMatch(suggestion.text, suggestion.matchedText);\n        }\n\n        const title = suggestion.data?.name ||\n                     suggestion.data?.label ||\n                     suggestion.data?.id ||\n                     'Unknown';\n\n        return this.highlightMatch(title, suggestion.matchedText);\n    }\n\n    /**\n     * Get suggestion subtitle\n     */\n    getSuggestionSubtitle(suggestion) {\n        if (suggestion.type === 'suggestion' || suggestion.isRecent) {\n            return null;\n        }\n\n        if (suggestion.type === 'edge') {\n            return `${suggestion.data.source} ‚Üí ${suggestion.data.target}`;\n        }\n\n        // For nodes, show type and location if available\n        const parts = [];\n        if (suggestion.data?.type) {\n            parts.push(suggestion.data.type.replace(/_/g, ' '));\n        }\n        if (suggestion.data?.address?.city) {\n            parts.push(`${suggestion.data.address.city}, ${suggestion.data.address.state}`);\n        }\n\n        return parts.join(' ‚Ä¢ ');\n    }\n\n    /**\n     * Get suggestion type label\n     */\n    getSuggestionTypeLabel(suggestion) {\n        if (suggestion.isRecent) {return null;}\n        if (suggestion.type === 'suggestion') {return 'Search';}\n        return suggestion.type === 'edge' ? 'Edge' : 'Node';\n    }\n\n    /**\n     * Highlight matching text\n     */\n    highlightMatch(text, query) {\n        if (!this.config.highlightMatches || !query) {return text;}\n\n        const regex = new RegExp(`(${query})`, 'gi');\n        return text.replace(regex, '<span class=\"search-highlight\">$1</span>');\n    }\n\n    /**\n     * Update suggestion selection styling\n     */\n    updateSuggestionSelection() {\n        const items = this.suggestionsContainer.querySelectorAll('.suggestion-item');\n        items.forEach((item, index) => {\n            item.classList.toggle('selected', index === this.selectedSuggestionIndex);\n        });\n\n        // Update ARIA attributes\n        this.searchInput.setAttribute('aria-activedescendant',\n            this.selectedSuggestionIndex >= 0 ?\n                `suggestion-${this.selectedSuggestionIndex}` : '');\n    }\n\n    /**\n     * Select a suggestion\n     */\n    selectSuggestion(index) {\n        const suggestion = this.currentSuggestions[index];\n        if (!suggestion) {return;}\n\n        if (suggestion.type === 'suggestion' || suggestion.isRecent) {\n            this.searchInput.value = suggestion.text;\n            this.performDirectSearch(suggestion.text);\n        } else {\n            // Select the actual node/edge\n            if (suggestion.type === 'node') {\n                store.setState({ selectedNode: suggestion.data });\n                this.highlightSearchResult(suggestion.data);\n            } else if (suggestion.type === 'edge') {\n                store.setState({ selectedEdge: suggestion.data });\n                this.highlightSearchResult(suggestion.data);\n            }\n\n            this.searchInput.value = this.getSuggestionTitle(suggestion);\n            this.hideSuggestions();\n        }\n    }\n\n    /**\n     * Perform direct search without suggestions\n     */\n    performDirectSearch(query) {\n        this.hideSuggestions();\n\n        // Emit search event for other components\n        document.dispatchEvent(new CustomEvent('globalSearch', {\n            detail: {\n                query,\n                scope: this.config.currentScope,\n                timestamp: Date.now()\n            }\n        }));\n\n        // Add to search history\n        if (query.length >= this.config.minQueryLength) {\n            search.addToHistory(query);\n        }\n    }\n\n    /**\n     * Highlight search result in graph\n     */\n    highlightSearchResult(data) {\n        document.dispatchEvent(new CustomEvent('highlightGraphElement', {\n            detail: {\n                element: data,\n                type: data.source ? 'edge' : 'node'\n            }\n        }));\n    }\n\n    /**\n     * Show suggestions dropdown\n     */\n    showSuggestions() {\n        this.suggestionsContainer.style.display = 'block';\n        this.searchInput.setAttribute('aria-expanded', 'true');\n        this.isOpen = true;\n        this.selectedSuggestionIndex = -1;\n    }\n\n    /**\n     * Hide suggestions dropdown\n     */\n    hideSuggestions() {\n        this.suggestionsContainer.style.display = 'none';\n        this.searchInput.setAttribute('aria-expanded', 'false');\n        this.isOpen = false;\n        this.selectedSuggestionIndex = -1;\n        this.currentSuggestions = [];\n    }\n\n    /**\n     * Clear search\n     */\n    clearSearch() {\n        this.searchInput.value = '';\n        this.hideSuggestions();\n\n        const clearBtn = this.container.querySelector('#search-clear');\n        if (clearBtn) {\n            clearBtn.style.display = 'none';\n        }\n\n        // Emit clear event\n        document.dispatchEvent(new CustomEvent('globalSearchClear'));\n    }\n\n    /**\n     * Update search index when data changes\n     */\n    updateSearchIndex() {\n        // This will be called when store data changes\n        search.updateIndex();\n    }\n\n    /**\n     * Get current search query\n     */\n    getCurrentQuery() {\n        return this.searchInput ? this.searchInput.value : '';\n    }\n\n    /**\n     * Set search query programmatically\n     */\n    setQuery(query) {\n        if (this.searchInput) {\n            this.searchInput.value = query;\n            if (query) {\n                this.debouncedSearch(query);\n            }\n        }\n    }\n\n    /**\n     * Focus search input\n     */\n    focus() {\n        if (this.searchInput) {\n            this.searchInput.focus();\n        }\n    }\n\n    /**\n     * Destroy the search component\n     */\n    destroy() {\n        this.hideSuggestions();\n\n        // Remove event listeners would go here in a full implementation\n        // For now, cleanup main references\n        this.searchInput = null;\n        this.suggestionsContainer = null;\n        this.currentSuggestions = [];\n    }\n}\n\nexport default GlobalSearch;\n","/**\n * Advanced Filters Component\n * Comprehensive filtering for equipment type, date range, severity, location region, etc.\n */\n\nimport { filter } from '../utils/filter.js';\nimport { store } from '../core/store.js';\n\nexport class AdvancedFilters {\n    constructor(containerId) {\n        this.container = document.getElementById(containerId) || document.querySelector(containerId);\n        this.activeFilters = new Map();\n        this.filterState = {\n            equipmentTypes: [],\n            dateRange: { start: null, end: null },\n            severity: [],\n            locationRegions: [],\n            connectionCount: { min: 0, max: null },\n            customProperties: {}\n        };\n\n        this.init();\n        this.setupEventListeners();\n    }\n\n    /**\n     * Initialize the filter panel\n     */\n    init() {\n        if (!this.container) {\n            console.warn('AdvancedFilters: Container not found');\n            return;\n        }\n\n        this.createFilterInterface();\n        this.addFilterStyles();\n        this.loadFilterState();\n    }\n\n    /**\n     * Create the comprehensive filter interface\n     */\n    createFilterInterface() {\n        this.container.innerHTML = `\n            <div class=\"advanced-filters-container\">\n                <div class=\"filter-header\">\n                    <h2>üîç Advanced Filters</h2>\n                    <div class=\"filter-actions\">\n                        <button id=\"clear-all-filters\" class=\"filter-btn filter-btn-secondary\">\n                            üóëÔ∏è Clear All\n                        </button>\n                        <button id=\"save-filter-set\" class=\"filter-btn filter-btn-primary\">\n                            üíæ Save Set\n                        </button>\n                    </div>\n                </div>\n\n                <!-- Equipment Type Filter -->\n                <div class=\"filter-section\" id=\"equipment-type-section\">\n                    <div class=\"filter-section-header\">\n                        <h3>üîß Equipment Type</h3>\n                        <button class=\"filter-toggle\" data-section=\"equipment-type\">\n                            <span class=\"toggle-icon\">‚ñº</span>\n                        </button>\n                    </div>\n                    <div class=\"filter-content\">\n                        <div class=\"checkbox-group\">\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"faa_stars_terminal\" data-filter=\"equipmentType\">\n                                <span class=\"checkmark\"></span>\n                                <span class=\"checkbox-icon\">üè¢</span>\n                                FAA STARS Terminal\n                            </label>\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"approach_control\" data-filter=\"equipmentType\">\n                                <span class=\"checkmark\"></span>\n                                <span class=\"checkbox-icon\">üõ´</span>\n                                Approach Control\n                            </label>\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"faa_eram_terminal\" data-filter=\"equipmentType\">\n                                <span class=\"checkmark\"></span>\n                                <span class=\"checkbox-icon\">üì°</span>\n                                FAA ERAM Terminal\n                            </label>\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"radar_equipment\" data-filter=\"equipmentType\">\n                                <span class=\"checkmark\"></span>\n                                <span class=\"checkbox-icon\">üìä</span>\n                                Radar Equipment\n                            </label>\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"communication_equipment\" data-filter=\"equipmentType\">\n                                <span class=\"checkmark\"></span>\n                                <span class=\"checkbox-icon\">üìª</span>\n                                Communication Equipment\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Date Range Filter -->\n                <div class=\"filter-section\" id=\"date-range-section\">\n                    <div class=\"filter-section-header\">\n                        <h3>üìÖ Date Range</h3>\n                        <button class=\"filter-toggle\" data-section=\"date-range\">\n                            <span class=\"toggle-icon\">‚ñº</span>\n                        </button>\n                    </div>\n                    <div class=\"filter-content\">\n                        <div class=\"date-range-container\">\n                            <div class=\"date-input-group\">\n                                <label>From:</label>\n                                <input type=\"date\" id=\"date-start\" data-filter=\"dateRange\">\n                            </div>\n                            <div class=\"date-input-group\">\n                                <label>To:</label>\n                                <input type=\"date\" id=\"date-end\" data-filter=\"dateRange\">\n                            </div>\n                        </div>\n                        <div class=\"date-presets\">\n                            <button class=\"date-preset\" data-days=\"7\">Last 7 days</button>\n                            <button class=\"date-preset\" data-days=\"30\">Last 30 days</button>\n                            <button class=\"date-preset\" data-days=\"90\">Last 90 days</button>\n                            <button class=\"date-preset\" data-days=\"365\">Last year</button>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Severity Filter -->\n                <div class=\"filter-section\" id=\"severity-section\">\n                    <div class=\"filter-section-header\">\n                        <h3>‚ö†Ô∏è Severity Level</h3>\n                        <button class=\"filter-toggle\" data-section=\"severity\">\n                            <span class=\"toggle-icon\">‚ñº</span>\n                        </button>\n                    </div>\n                    <div class=\"filter-content\">\n                        <div class=\"severity-grid\">\n                            <label class=\"severity-item severity-critical\">\n                                <input type=\"checkbox\" value=\"critical\" data-filter=\"severity\">\n                                <span class=\"severity-indicator\"></span>\n                                <span class=\"severity-label\">Critical</span>\n                            </label>\n                            <label class=\"severity-item severity-high\">\n                                <input type=\"checkbox\" value=\"high\" data-filter=\"severity\">\n                                <span class=\"severity-indicator\"></span>\n                                <span class=\"severity-label\">High</span>\n                            </label>\n                            <label class=\"severity-item severity-medium\">\n                                <input type=\"checkbox\" value=\"medium\" data-filter=\"severity\">\n                                <span class=\"severity-indicator\"></span>\n                                <span class=\"severity-label\">Medium</span>\n                            </label>\n                            <label class=\"severity-item severity-low\">\n                                <input type=\"checkbox\" value=\"low\" data-filter=\"severity\">\n                                <span class=\"severity-indicator\"></span>\n                                <span class=\"severity-label\">Low</span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Location Region Filter -->\n                <div class=\"filter-section\" id=\"location-section\">\n                    <div class=\"filter-section-header\">\n                        <h3>üìç Location Region</h3>\n                        <button class=\"filter-toggle\" data-section=\"location\">\n                            <span class=\"toggle-icon\">‚ñº</span>\n                        </button>\n                    </div>\n                    <div class=\"filter-content\">\n                        <div class=\"location-search\">\n                            <input type=\"text\" id=\"location-search\" placeholder=\"Search locations...\" \n                                   autocomplete=\"off\">\n                        </div>\n                        <div class=\"location-regions\">\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"northeast\" data-filter=\"region\">\n                                <span class=\"checkmark\"></span>\n                                Northeast US\n                            </label>\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"southeast\" data-filter=\"region\">\n                                <span class=\"checkmark\"></span>\n                                Southeast US\n                            </label>\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"midwest\" data-filter=\"region\">\n                                <span class=\"checkmark\"></span>\n                                Midwest US\n                            </label>\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"southwest\" data-filter=\"region\">\n                                <span class=\"checkmark\"></span>\n                                Southwest US\n                            </label>\n                            <label class=\"filter-checkbox\">\n                                <input type=\"checkbox\" value=\"west\" data-filter=\"region\">\n                                <span class=\"checkmark\"></span>\n                                Western US\n                            </label>\n                        </div>\n                        <div class=\"specific-locations\" id=\"specific-locations\">\n                            <!-- Dynamically populated based on data -->\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Connection Count Filter -->\n                <div class=\"filter-section\" id=\"connection-section\">\n                    <div class=\"filter-section-header\">\n                        <h3>üîó Connection Count</h3>\n                        <button class=\"filter-toggle\" data-section=\"connection\">\n                            <span class=\"toggle-icon\">‚ñº</span>\n                        </button>\n                    </div>\n                    <div class=\"filter-content\">\n                        <div class=\"range-filter\">\n                            <div class=\"range-input-group\">\n                                <label>Minimum:</label>\n                                <input type=\"number\" id=\"connection-min\" min=\"0\" placeholder=\"0\" \n                                       data-filter=\"connectionCount\">\n                            </div>\n                            <div class=\"range-input-group\">\n                                <label>Maximum:</label>\n                                <input type=\"number\" id=\"connection-max\" min=\"0\" placeholder=\"‚àû\" \n                                       data-filter=\"connectionCount\">\n                            </div>\n                        </div>\n                        <div class=\"range-slider-container\">\n                            <input type=\"range\" id=\"connection-range\" min=\"0\" max=\"50\" value=\"0\" \n                                   class=\"range-slider\">\n                            <div class=\"range-labels\">\n                                <span>0</span>\n                                <span>50+</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Custom Properties Filter -->\n                <div class=\"filter-section\" id=\"custom-properties-section\">\n                    <div class=\"filter-section-header\">\n                        <h3>‚öôÔ∏è Custom Properties</h3>\n                        <button class=\"filter-toggle\" data-section=\"custom-properties\">\n                            <span class=\"toggle-icon\">‚ñº</span>\n                        </button>\n                    </div>\n                    <div class=\"filter-content\">\n                        <div class=\"custom-filter-builder\">\n                            <div class=\"property-filter-row\">\n                                <select id=\"property-key\" class=\"property-select\">\n                                    <option value=\"\">Select property...</option>\n                                </select>\n                                <select id=\"property-operator\" class=\"operator-select\">\n                                    <option value=\"equals\">equals</option>\n                                    <option value=\"contains\">contains</option>\n                                    <option value=\"greater\">greater than</option>\n                                    <option value=\"less\">less than</option>\n                                </select>\n                                <input type=\"text\" id=\"property-value\" class=\"property-value\" \n                                       placeholder=\"Value...\">\n                                <button id=\"add-property-filter\" class=\"add-filter-btn\">+</button>\n                            </div>\n                            <div id=\"active-property-filters\" class=\"active-filters-list\">\n                                <!-- Active property filters will be displayed here -->\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Filter Summary -->\n                <div class=\"filter-summary\">\n                    <div class=\"summary-header\">\n                        <h4>üìä Filter Summary</h4>\n                    </div>\n                    <div class=\"summary-content\">\n                        <div class=\"summary-stats\">\n                            <div class=\"stat-item\">\n                                <span class=\"stat-value\" id=\"filtered-nodes\">0</span>\n                                <span class=\"stat-label\">Nodes</span>\n                            </div>\n                            <div class=\"stat-item\">\n                                <span class=\"stat-value\" id=\"filtered-edges\">0</span>\n                                <span class=\"stat-label\">Edges</span>\n                            </div>\n                        </div>\n                        <div class=\"active-filters-summary\" id=\"active-filters-summary\">\n                            <!-- Active filters summary -->\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Saved Filter Sets -->\n                <div class=\"saved-filters-section\">\n                    <div class=\"section-header\">\n                        <h4>üíæ Saved Filter Sets</h4>\n                    </div>\n                    <div id=\"saved-filters-list\" class=\"saved-filters-list\">\n                        <!-- Saved filter sets will be displayed here -->\n                    </div>\n                </div>\n            </div>\n        `;\n\n        this.populateSpecificLocations();\n        this.populatePropertyKeys();\n        this.loadSavedFilterSets();\n    }\n\n    /**\n     * Add comprehensive styles for the filter component\n     */\n    addFilterStyles() {\n        if (document.querySelector('#advanced-filters-styles')) {return;}\n\n        const style = document.createElement('style');\n        style.id = 'advanced-filters-styles';\n        style.textContent = `\n            .advanced-filters-container {\n                padding: 20px;\n                background: #f8f9fa;\n                border-radius: 12px;\n                max-height: calc(100vh - 200px);\n                overflow-y: auto;\n            }\n\n            .filter-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 20px;\n                padding-bottom: 15px;\n                border-bottom: 2px solid #e9ecef;\n            }\n\n            .filter-header h2 {\n                margin: 0;\n                color: #2c3e50;\n                font-size: 18px;\n            }\n\n            .filter-actions {\n                display: flex;\n                gap: 10px;\n            }\n\n            .filter-btn {\n                padding: 8px 16px;\n                border: none;\n                border-radius: 6px;\n                font-size: 12px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.2s ease;\n            }\n\n            .filter-btn-primary {\n                background: #3498db;\n                color: white;\n            }\n\n            .filter-btn-primary:hover {\n                background: #2980b9;\n            }\n\n            .filter-btn-secondary {\n                background: #e9ecef;\n                color: #6c757d;\n            }\n\n            .filter-btn-secondary:hover {\n                background: #dee2e6;\n                color: #495057;\n            }\n\n            .filter-section {\n                margin-bottom: 20px;\n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            }\n\n            .filter-section-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 15px 20px;\n                border-bottom: 1px solid #e9ecef;\n                cursor: pointer;\n            }\n\n            .filter-section-header h3 {\n                margin: 0;\n                font-size: 14px;\n                color: #2c3e50;\n            }\n\n            .filter-toggle {\n                background: none;\n                border: none;\n                cursor: pointer;\n                padding: 5px;\n                border-radius: 4px;\n                transition: background-color 0.2s ease;\n            }\n\n            .filter-toggle:hover {\n                background: #f8f9fa;\n            }\n\n            .toggle-icon {\n                transition: transform 0.2s ease;\n            }\n\n            .filter-section.collapsed .toggle-icon {\n                transform: rotate(-90deg);\n            }\n\n            .filter-content {\n                padding: 20px;\n            }\n\n            .filter-section.collapsed .filter-content {\n                display: none;\n            }\n\n            /* Checkbox Styles */\n            .checkbox-group {\n                display: flex;\n                flex-direction: column;\n                gap: 12px;\n            }\n\n            .filter-checkbox {\n                display: flex;\n                align-items: center;\n                cursor: pointer;\n                padding: 8px;\n                border-radius: 6px;\n                transition: background-color 0.2s ease;\n            }\n\n            .filter-checkbox:hover {\n                background: #f8f9fa;\n            }\n\n            .filter-checkbox input[type=\"checkbox\"] {\n                display: none;\n            }\n\n            .checkmark {\n                width: 18px;\n                height: 18px;\n                border: 2px solid #bdc3c7;\n                border-radius: 4px;\n                margin-right: 10px;\n                position: relative;\n                transition: all 0.2s ease;\n            }\n\n            .filter-checkbox input[type=\"checkbox\"]:checked + .checkmark {\n                background: #3498db;\n                border-color: #3498db;\n            }\n\n            .filter-checkbox input[type=\"checkbox\"]:checked + .checkmark::after {\n                content: '‚úì';\n                position: absolute;\n                top: -2px;\n                left: 2px;\n                color: white;\n                font-size: 12px;\n                font-weight: bold;\n            }\n\n            .checkbox-icon {\n                margin-right: 8px;\n                font-size: 16px;\n            }\n\n            /* Date Range Styles */\n            .date-range-container {\n                display: flex;\n                gap: 15px;\n                margin-bottom: 15px;\n            }\n\n            .date-input-group {\n                flex: 1;\n            }\n\n            .date-input-group label {\n                display: block;\n                font-size: 12px;\n                font-weight: 600;\n                color: #6c757d;\n                margin-bottom: 5px;\n            }\n\n            .date-input-group input {\n                width: 100%;\n                padding: 8px 12px;\n                border: 1px solid #e9ecef;\n                border-radius: 6px;\n                font-size: 14px;\n                outline: none;\n                transition: border-color 0.2s ease;\n            }\n\n            .date-input-group input:focus {\n                border-color: #3498db;\n                box-shadow: 0 0 0 2px rgba(52,152,219,0.2);\n            }\n\n            .date-presets {\n                display: flex;\n                gap: 8px;\n                flex-wrap: wrap;\n            }\n\n            .date-preset {\n                padding: 6px 12px;\n                background: #e9ecef;\n                border: none;\n                border-radius: 4px;\n                font-size: 11px;\n                cursor: pointer;\n                transition: all 0.2s ease;\n            }\n\n            .date-preset:hover {\n                background: #dee2e6;\n            }\n\n            .date-preset.active {\n                background: #3498db;\n                color: white;\n            }\n\n            /* Severity Styles */\n            .severity-grid {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n                gap: 12px;\n            }\n\n            .severity-item {\n                display: flex;\n                align-items: center;\n                padding: 10px;\n                border-radius: 6px;\n                cursor: pointer;\n                border: 2px solid transparent;\n                transition: all 0.2s ease;\n            }\n\n            .severity-item input[type=\"checkbox\"] {\n                display: none;\n            }\n\n            .severity-indicator {\n                width: 12px;\n                height: 12px;\n                border-radius: 50%;\n                margin-right: 8px;\n            }\n\n            .severity-critical .severity-indicator {\n                background: #e74c3c;\n            }\n\n            .severity-high .severity-indicator {\n                background: #f39c12;\n            }\n\n            .severity-medium .severity-indicator {\n                background: #f1c40f;\n            }\n\n            .severity-low .severity-indicator {\n                background: #2ecc71;\n            }\n\n            .severity-item input[type=\"checkbox\"]:checked + .severity-indicator {\n                box-shadow: 0 0 0 3px rgba(255,255,255,1), 0 0 0 5px currentColor;\n            }\n\n            .severity-label {\n                font-size: 12px;\n                font-weight: 600;\n            }\n\n            /* Location Styles */\n            .location-search {\n                margin-bottom: 15px;\n            }\n\n            .location-search input {\n                width: 100%;\n                padding: 10px 15px;\n                border: 1px solid #e9ecef;\n                border-radius: 25px;\n                font-size: 14px;\n                outline: none;\n                transition: border-color 0.2s ease;\n            }\n\n            .location-search input:focus {\n                border-color: #3498db;\n            }\n\n            .location-regions {\n                margin-bottom: 15px;\n            }\n\n            .specific-locations {\n                max-height: 150px;\n                overflow-y: auto;\n                border: 1px solid #e9ecef;\n                border-radius: 6px;\n                padding: 10px;\n            }\n\n            /* Range Filter Styles */\n            .range-filter {\n                display: flex;\n                gap: 15px;\n                margin-bottom: 15px;\n            }\n\n            .range-input-group {\n                flex: 1;\n            }\n\n            .range-slider-container {\n                position: relative;\n            }\n\n            .range-slider {\n                width: 100%;\n                height: 6px;\n                border-radius: 3px;\n                background: #e9ecef;\n                outline: none;\n                cursor: pointer;\n            }\n\n            .range-slider::-webkit-slider-thumb {\n                appearance: none;\n                width: 18px;\n                height: 18px;\n                border-radius: 50%;\n                background: #3498db;\n                cursor: pointer;\n            }\n\n            .range-labels {\n                display: flex;\n                justify-content: space-between;\n                margin-top: 8px;\n                font-size: 11px;\n                color: #6c757d;\n            }\n\n            /* Custom Properties Styles */\n            .property-filter-row {\n                display: flex;\n                gap: 10px;\n                align-items: end;\n                margin-bottom: 15px;\n            }\n\n            .property-select,\n            .operator-select {\n                flex: 1;\n                padding: 8px 12px;\n                border: 1px solid #e9ecef;\n                border-radius: 6px;\n                background: white;\n                outline: none;\n            }\n\n            .property-value {\n                flex: 1;\n                padding: 8px 12px;\n                border: 1px solid #e9ecef;\n                border-radius: 6px;\n                outline: none;\n            }\n\n            .add-filter-btn {\n                width: 36px;\n                height: 36px;\n                background: #3498db;\n                color: white;\n                border: none;\n                border-radius: 6px;\n                cursor: pointer;\n                font-size: 16px;\n                font-weight: bold;\n            }\n\n            .add-filter-btn:hover {\n                background: #2980b9;\n            }\n\n            .active-filters-list {\n                display: flex;\n                flex-direction: column;\n                gap: 8px;\n            }\n\n            .property-filter-tag {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                padding: 8px 12px;\n                background: #e3f2fd;\n                border-radius: 6px;\n                font-size: 12px;\n            }\n\n            .filter-tag-remove {\n                background: none;\n                border: none;\n                color: #2196f3;\n                cursor: pointer;\n                font-size: 14px;\n                padding: 2px 4px;\n            }\n\n            /* Filter Summary Styles */\n            .filter-summary {\n                background: white;\n                border-radius: 8px;\n                padding: 15px;\n                margin-bottom: 20px;\n                box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            }\n\n            .summary-header h4 {\n                margin: 0 0 15px 0;\n                font-size: 14px;\n                color: #2c3e50;\n            }\n\n            .summary-stats {\n                display: flex;\n                gap: 20px;\n                margin-bottom: 15px;\n            }\n\n            .stat-item {\n                text-align: center;\n            }\n\n            .stat-value {\n                display: block;\n                font-size: 24px;\n                font-weight: bold;\n                color: #3498db;\n            }\n\n            .stat-label {\n                display: block;\n                font-size: 11px;\n                color: #6c757d;\n                text-transform: uppercase;\n                letter-spacing: 0.5px;\n            }\n\n            .active-filters-summary {\n                display: flex;\n                flex-wrap: wrap;\n                gap: 6px;\n            }\n\n            .filter-tag {\n                padding: 4px 8px;\n                background: #e9ecef;\n                border-radius: 4px;\n                font-size: 11px;\n                color: #495057;\n            }\n\n            /* Saved Filters Styles */\n            .saved-filters-section {\n                background: white;\n                border-radius: 8px;\n                padding: 15px;\n                box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            }\n\n            .saved-filters-list {\n                display: flex;\n                flex-direction: column;\n                gap: 8px;\n            }\n\n            .saved-filter-item {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 10px;\n                background: #f8f9fa;\n                border-radius: 6px;\n                cursor: pointer;\n                transition: background-color 0.2s ease;\n            }\n\n            .saved-filter-item:hover {\n                background: #e9ecef;\n            }\n\n            .saved-filter-name {\n                font-weight: 600;\n                color: #2c3e50;\n            }\n\n            .saved-filter-actions {\n                display: flex;\n                gap: 5px;\n            }\n\n            .filter-action-btn {\n                padding: 4px 8px;\n                background: none;\n                border: 1px solid #dee2e6;\n                border-radius: 4px;\n                font-size: 11px;\n                cursor: pointer;\n                transition: all 0.2s ease;\n            }\n\n            .filter-action-btn:hover {\n                background: #e9ecef;\n            }\n\n            /* Dark theme support */\n            .theme-dark .advanced-filters-container,\n            .theme-dark .filter-section,\n            .theme-dark .filter-summary,\n            .theme-dark .saved-filters-section {\n                background: #2c3e50;\n                color: #ecf0f1;\n            }\n\n            .theme-dark .filter-section-header {\n                border-bottom-color: #34495e;\n            }\n\n            .theme-dark .filter-content {\n                background: #2c3e50;\n            }\n\n            .theme-dark .date-input-group input,\n            .theme-dark .location-search input,\n            .theme-dark .property-value,\n            .theme-dark .property-select,\n            .theme-dark .operator-select {\n                background: #34495e;\n                border-color: #4a5c6b;\n                color: #ecf0f1;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n\n    /**\n     * Setup event listeners for all filter interactions\n     */\n    setupEventListeners() {\n        // Section toggle handlers\n        this.container.addEventListener('click', (e) => {\n            if (e.target.closest('.filter-toggle')) {\n                const section = e.target.closest('.filter-section');\n                section.classList.toggle('collapsed');\n            }\n        });\n\n        // Checkbox filters\n        this.container.addEventListener('change', (e) => {\n            if (e.target.type === 'checkbox') {\n                this.handleCheckboxFilter(e.target);\n            }\n        });\n\n        // Date range filters\n        this.container.addEventListener('change', (e) => {\n            if (e.target.type === 'date') {\n                this.handleDateRangeFilter();\n            }\n        });\n\n        // Date preset buttons\n        this.container.addEventListener('click', (e) => {\n            if (e.target.classList.contains('date-preset')) {\n                this.handleDatePreset(e.target);\n            }\n        });\n\n        // Location search\n        const locationSearch = this.container.querySelector('#location-search');\n        if (locationSearch) {\n            locationSearch.addEventListener('input', (e) => {\n                this.handleLocationSearch(e.target.value);\n            });\n        }\n\n        // Connection count filters\n        const connectionMin = this.container.querySelector('#connection-min');\n        const connectionMax = this.container.querySelector('#connection-max');\n        const connectionRange = this.container.querySelector('#connection-range');\n\n        [connectionMin, connectionMax].forEach(input => {\n            if (input) {\n                input.addEventListener('input', () => this.handleConnectionCountFilter());\n            }\n        });\n\n        if (connectionRange) {\n            connectionRange.addEventListener('input', (e) => {\n                connectionMin.value = e.target.value;\n                this.handleConnectionCountFilter();\n            });\n        }\n\n        // Custom property filters\n        const addPropertyBtn = this.container.querySelector('#add-property-filter');\n        if (addPropertyBtn) {\n            addPropertyBtn.addEventListener('click', () => {\n                this.addCustomPropertyFilter();\n            });\n        }\n\n        // Clear all filters\n        const clearAllBtn = this.container.querySelector('#clear-all-filters');\n        if (clearAllBtn) {\n            clearAllBtn.addEventListener('click', () => {\n                this.clearAllFilters();\n            });\n        }\n\n        // Save filter set\n        const saveFilterBtn = this.container.querySelector('#save-filter-set');\n        if (saveFilterBtn) {\n            saveFilterBtn.addEventListener('click', () => {\n                this.saveFilterSet();\n            });\n        }\n\n        // Store subscription for data updates\n        store.subscribe('nodes', () => this.updateFilterSummary());\n        store.subscribe('edges', () => this.updateFilterSummary());\n    }\n\n    /**\n     * Handle checkbox filter changes\n     */\n    handleCheckboxFilter(checkbox) {\n        const filterType = checkbox.dataset.filter;\n        const value = checkbox.value;\n\n        switch (filterType) {\n        case 'equipmentType':\n            this.updateArrayFilter('equipmentTypes', value, checkbox.checked);\n            break;\n        case 'severity':\n            this.updateArrayFilter('severity', value, checkbox.checked);\n            break;\n        case 'region':\n            this.updateArrayFilter('locationRegions', value, checkbox.checked);\n            break;\n        }\n\n        this.applyFilters();\n    }\n\n    /**\n     * Update array-based filter\n     */\n    updateArrayFilter(filterKey, value, checked) {\n        if (checked) {\n            if (!this.filterState[filterKey].includes(value)) {\n                this.filterState[filterKey].push(value);\n            }\n        } else {\n            this.filterState[filterKey] = this.filterState[filterKey].filter(v => v !== value);\n        }\n    }\n\n    /**\n     * Handle date range filter changes\n     */\n    handleDateRangeFilter() {\n        const startInput = this.container.querySelector('#date-start');\n        const endInput = this.container.querySelector('#date-end');\n\n        this.filterState.dateRange = {\n            start: startInput.value || null,\n            end: endInput.value || null\n        };\n\n        this.applyFilters();\n    }\n\n    /**\n     * Handle date preset selection\n     */\n    handleDatePreset(button) {\n        const days = parseInt(button.dataset.days);\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(endDate.getDate() - days);\n\n        const startInput = this.container.querySelector('#date-start');\n        const endInput = this.container.querySelector('#date-end');\n\n        if (startInput && endInput) {\n            startInput.value = startDate.toISOString().split('T')[0];\n            endInput.value = endDate.toISOString().split('T')[0];\n        }\n\n        // Update active preset styling\n        this.container.querySelectorAll('.date-preset').forEach(btn => {\n            btn.classList.remove('active');\n        });\n        button.classList.add('active');\n\n        this.handleDateRangeFilter();\n    }\n\n    /**\n     * Handle location search\n     */\n    handleLocationSearch(query) {\n        const specificLocations = this.container.querySelector('#specific-locations');\n        if (!specificLocations) {return;}\n\n        // Get unique locations from data\n        const { nodes } = store.getState();\n        const locations = new Set();\n\n        nodes.forEach(node => {\n            if (node.address?.city) {\n                const location = `${node.address.city}, ${node.address.state}`;\n                if (location.toLowerCase().includes(query.toLowerCase())) {\n                    locations.add(location);\n                }\n            }\n        });\n\n        // Render filtered locations\n        specificLocations.innerHTML = Array.from(locations)\n            .slice(0, 10) // Limit to 10 results\n            .map(location => `\n                <label class=\"filter-checkbox\">\n                    <input type=\"checkbox\" value=\"${location}\" data-filter=\"specificLocation\">\n                    <span class=\"checkmark\"></span>\n                    üìç ${location}\n                </label>\n            `).join('');\n    }\n\n    /**\n     * Handle connection count filter\n     */\n    handleConnectionCountFilter() {\n        const minInput = this.container.querySelector('#connection-min');\n        const maxInput = this.container.querySelector('#connection-max');\n        const rangeSlider = this.container.querySelector('#connection-range');\n\n        const min = parseInt(minInput.value) || 0;\n        const max = maxInput.value ? parseInt(maxInput.value) : null;\n\n        this.filterState.connectionCount = { min, max };\n\n        if (rangeSlider) {\n            rangeSlider.value = min;\n        }\n\n        this.applyFilters();\n    }\n\n    /**\n     * Add custom property filter\n     */\n    addCustomPropertyFilter() {\n        const keySelect = this.container.querySelector('#property-key');\n        const operatorSelect = this.container.querySelector('#property-operator');\n        const valueInput = this.container.querySelector('#property-value');\n\n        if (!keySelect.value || !valueInput.value) {return;}\n\n        const filterId = `${keySelect.value}_${Date.now()}`;\n        this.filterState.customProperties[filterId] = {\n            key: keySelect.value,\n            operator: operatorSelect.value,\n            value: valueInput.value\n        };\n\n        this.renderCustomPropertyFilters();\n        this.applyFilters();\n\n        // Clear inputs\n        valueInput.value = '';\n    }\n\n    /**\n     * Render active custom property filters\n     */\n    renderCustomPropertyFilters() {\n        const container = this.container.querySelector('#active-property-filters');\n        if (!container) {return;}\n\n        container.innerHTML = Object.entries(this.filterState.customProperties)\n            .map(([filterId, filterData]) => `\n                <div class=\"property-filter-tag\" data-filter-id=\"${filterId}\">\n                    <span>${filterData.key} ${filterData.operator} \"${filterData.value}\"</span>\n                    <button class=\"filter-tag-remove\" onclick=\"this.removePropertyFilter('${filterId}')\">√ó</button>\n                </div>\n            `).join('');\n    }\n\n    /**\n     * Remove custom property filter\n     */\n    removePropertyFilter(filterId) {\n        delete this.filterState.customProperties[filterId];\n        this.renderCustomPropertyFilters();\n        this.applyFilters();\n    }\n\n    /**\n     * Apply all active filters\n     */\n    applyFilters() {\n        const filterConfig = this.buildFilterConfig();\n        const filteredData = filter.applyFilters(filterConfig);\n\n        // Update store with filtered data or emit event\n        document.dispatchEvent(new CustomEvent('filtersApplied', {\n            detail: {\n                filteredData,\n                filterState: this.filterState\n            }\n        }));\n\n        this.updateFilterSummary(filteredData);\n        this.saveFilterState();\n    }\n\n    /**\n     * Build filter configuration from current state\n     */\n    buildFilterConfig() {\n        const config = { nodes: {}, edges: {} };\n\n        // Equipment type filter\n        if (this.filterState.equipmentTypes.length > 0) {\n            config.nodes.type = this.filterState.equipmentTypes;\n        }\n\n        // Date range filter (would need date properties in data)\n        if (this.filterState.dateRange.start || this.filterState.dateRange.end) {\n            config.nodes.properties = config.nodes.properties || {};\n            if (this.filterState.dateRange.start) {\n                config.nodes.properties.createdDate = {\n                    operator: 'gte',\n                    value: this.filterState.dateRange.start\n                };\n            }\n            if (this.filterState.dateRange.end) {\n                config.nodes.properties.createdDate = {\n                    ...config.nodes.properties.createdDate,\n                    operator: 'between',\n                    value: [this.filterState.dateRange.start, this.filterState.dateRange.end]\n                };\n            }\n        }\n\n        // Connection count filter\n        if (this.filterState.connectionCount.min > 0 || this.filterState.connectionCount.max !== null) {\n            config.nodes.connections = {\n                operator: this.filterState.connectionCount.max ? 'between' : 'gte',\n                value: this.filterState.connectionCount.max ?\n                    [this.filterState.connectionCount.min, this.filterState.connectionCount.max] :\n                    this.filterState.connectionCount.min\n            };\n        }\n\n        // Custom property filters\n        Object.entries(this.filterState.customProperties).forEach(([filterId, filterData]) => {\n            config.nodes.properties = config.nodes.properties || {};\n            config.nodes.properties[filterData.key] = {\n                operator: filterData.operator === 'equals' ? 'eq' : filterData.operator,\n                value: filterData.value\n            };\n        });\n\n        return config;\n    }\n\n    /**\n     * Update filter summary statistics\n     */\n    updateFilterSummary(filteredData = null) {\n        if (!filteredData) {\n            const filterConfig = this.buildFilterConfig();\n            filteredData = filter.applyFilters(filterConfig);\n        }\n\n        const nodesCount = this.container.querySelector('#filtered-nodes');\n        const edgesCount = this.container.querySelector('#filtered-edges');\n        const summary = this.container.querySelector('#active-filters-summary');\n\n        if (nodesCount) {nodesCount.textContent = filteredData.nodes.length;}\n        if (edgesCount) {edgesCount.textContent = filteredData.edges.length;}\n\n        if (summary) {\n            const activeTags = [];\n\n            if (this.filterState.equipmentTypes.length > 0) {\n                activeTags.push(`Equipment: ${this.filterState.equipmentTypes.join(', ')}`);\n            }\n\n            if (this.filterState.dateRange.start || this.filterState.dateRange.end) {\n                activeTags.push('Date Range');\n            }\n\n            if (this.filterState.severity.length > 0) {\n                activeTags.push(`Severity: ${this.filterState.severity.join(', ')}`);\n            }\n\n            if (this.filterState.connectionCount.min > 0 || this.filterState.connectionCount.max) {\n                activeTags.push('Connection Count');\n            }\n\n            summary.innerHTML = activeTags\n                .map(tag => `<span class=\"filter-tag\">${tag}</span>`)\n                .join('');\n        }\n    }\n\n    /**\n     * Populate specific locations from data\n     */\n    populateSpecificLocations() {\n        const { nodes } = store.getState();\n        const locations = new Set();\n\n        nodes.forEach(node => {\n            if (node.address?.city) {\n                locations.add(`${node.address.city}, ${node.address.state}`);\n            }\n        });\n\n        const container = this.container.querySelector('#specific-locations');\n        if (container) {\n            container.innerHTML = Array.from(locations)\n                .slice(0, 20) // Show first 20 locations\n                .map(location => `\n                    <label class=\"filter-checkbox\">\n                        <input type=\"checkbox\" value=\"${location}\" data-filter=\"specificLocation\">\n                        <span class=\"checkmark\"></span>\n                        üìç ${location}\n                    </label>\n                `).join('');\n        }\n    }\n\n    /**\n     * Populate property keys for custom filters\n     */\n    populatePropertyKeys() {\n        const { nodes } = store.getState();\n        const properties = new Set();\n\n        nodes.forEach(node => {\n            if (node.properties) {\n                Object.keys(node.properties).forEach(key => properties.add(key));\n            }\n\n            // Add common node properties\n            ['type', 'name', 'label'].forEach(key => {\n                if (node[key]) {properties.add(key);}\n            });\n        });\n\n        const select = this.container.querySelector('#property-key');\n        if (select) {\n            select.innerHTML = `\n                <option value=\"\">Select property...</option>\n                ${Array.from(properties).map(prop =>\n        `<option value=\"${prop}\">${prop}</option>`\n    ).join('')}\n            `;\n        }\n    }\n\n    /**\n     * Clear all active filters\n     */\n    clearAllFilters() {\n        this.filterState = {\n            equipmentTypes: [],\n            dateRange: { start: null, end: null },\n            severity: [],\n            locationRegions: [],\n            connectionCount: { min: 0, max: null },\n            customProperties: {}\n        };\n\n        // Reset UI\n        this.container.querySelectorAll('input[type=\"checkbox\"]').forEach(cb => cb.checked = false);\n        this.container.querySelectorAll('input[type=\"date\"]').forEach(input => input.value = '');\n        this.container.querySelectorAll('input[type=\"number\"]').forEach(input => input.value = '');\n        this.container.querySelector('#property-value').value = '';\n\n        this.renderCustomPropertyFilters();\n        this.applyFilters();\n    }\n\n    /**\n     * Save current filter set\n     */\n    saveFilterSet() {\n        const name = prompt('Enter name for filter set:');\n        if (!name) {return;}\n\n        const filterSets = this.getSavedFilterSets();\n        filterSets[name] = {\n            ...this.filterState,\n            created: new Date().toISOString()\n        };\n\n        localStorage.setItem('nas-filter-sets', JSON.stringify(filterSets));\n        this.loadSavedFilterSets();\n    }\n\n    /**\n     * Load saved filter sets\n     */\n    loadSavedFilterSets() {\n        const filterSets = this.getSavedFilterSets();\n        const container = this.container.querySelector('#saved-filters-list');\n\n        if (!container) {return;}\n\n        container.innerHTML = Object.entries(filterSets)\n            .map(([name, filterSet]) => `\n                <div class=\"saved-filter-item\">\n                    <span class=\"saved-filter-name\">${name}</span>\n                    <div class=\"saved-filter-actions\">\n                        <button class=\"filter-action-btn\" onclick=\"this.applyFilterSet('${name}')\">Apply</button>\n                        <button class=\"filter-action-btn\" onclick=\"this.deleteFilterSet('${name}')\">Delete</button>\n                    </div>\n                </div>\n            `).join('');\n    }\n\n    /**\n     * Get saved filter sets from localStorage\n     */\n    getSavedFilterSets() {\n        try {\n            return JSON.parse(localStorage.getItem('nas-filter-sets') || '{}');\n        } catch {\n            return {};\n        }\n    }\n\n    /**\n     * Apply saved filter set\n     */\n    applyFilterSet(name) {\n        const filterSets = this.getSavedFilterSets();\n        const filterSet = filterSets[name];\n\n        if (!filterSet) {return;}\n\n        this.filterState = { ...filterSet };\n        delete this.filterState.created; // Remove metadata\n\n        this.updateUIFromFilterState();\n        this.applyFilters();\n    }\n\n    /**\n     * Update UI elements to match filter state\n     */\n    updateUIFromFilterState() {\n        // Update checkboxes\n        this.filterState.equipmentTypes.forEach(type => {\n            const checkbox = this.container.querySelector(`input[value=\"${type}\"][data-filter=\"equipmentType\"]`);\n            if (checkbox) {checkbox.checked = true;}\n        });\n\n        this.filterState.severity.forEach(sev => {\n            const checkbox = this.container.querySelector(`input[value=\"${sev}\"][data-filter=\"severity\"]`);\n            if (checkbox) {checkbox.checked = true;}\n        });\n\n        // Update date inputs\n        if (this.filterState.dateRange.start) {\n            const startInput = this.container.querySelector('#date-start');\n            if (startInput) {startInput.value = this.filterState.dateRange.start;}\n        }\n\n        if (this.filterState.dateRange.end) {\n            const endInput = this.container.querySelector('#date-end');\n            if (endInput) {endInput.value = this.filterState.dateRange.end;}\n        }\n\n        // Update connection count\n        const minInput = this.container.querySelector('#connection-min');\n        const maxInput = this.container.querySelector('#connection-max');\n\n        if (minInput) {minInput.value = this.filterState.connectionCount.min;}\n        if (maxInput && this.filterState.connectionCount.max) {\n            maxInput.value = this.filterState.connectionCount.max;\n        }\n\n        this.renderCustomPropertyFilters();\n    }\n\n    /**\n     * Delete saved filter set\n     */\n    deleteFilterSet(name) {\n        if (!confirm(`Delete filter set \"${name}\"?`)) {return;}\n\n        const filterSets = this.getSavedFilterSets();\n        delete filterSets[name];\n\n        localStorage.setItem('nas-filter-sets', JSON.stringify(filterSets));\n        this.loadSavedFilterSets();\n    }\n\n    /**\n     * Save current filter state to localStorage\n     */\n    saveFilterState() {\n        localStorage.setItem('nas-current-filter-state', JSON.stringify(this.filterState));\n    }\n\n    /**\n     * Load filter state from localStorage\n     */\n    loadFilterState() {\n        try {\n            const saved = localStorage.getItem('nas-current-filter-state');\n            if (saved) {\n                this.filterState = { ...this.filterState, ...JSON.parse(saved) };\n                this.updateUIFromFilterState();\n            }\n        } catch (e) {\n            console.warn('Failed to load filter state:', e);\n        }\n    }\n\n    /**\n     * Get current filter state\n     */\n    getFilterState() {\n        return { ...this.filterState };\n    }\n\n    /**\n     * Destroy the filter component\n     */\n    destroy() {\n        // Clean up event listeners and references\n        this.container = null;\n        this.activeFilters.clear();\n    }\n}\n\nexport default AdvancedFilters;\n","/**\n * Neighborhood Explorer Component\n * Context menu for exploring node neighborhoods with 1-hop and 2-hop functionality\n */\n\nimport { search } from '../utils/search.js';\nimport { store } from '../core/store.js';\n\nexport class NeighborhoodExplorer {\n    constructor() {\n        this.contextMenu = null;\n        this.currentNode = null;\n        this.exploredNodes = new Set();\n        this.explorationHistory = [];\n        this.maxHistorySize = 20;\n\n        this.init();\n        this.setupEventListeners();\n    }\n\n    /**\n     * Initialize the neighborhood explorer\n     */\n    init() {\n        this.createContextMenu();\n        this.addExplorerStyles();\n    }\n\n    /**\n     * Create the context menu structure\n     */\n    createContextMenu() {\n        // Remove existing context menu if any\n        if (this.contextMenu) {\n            document.body.removeChild(this.contextMenu);\n        }\n\n        this.contextMenu = document.createElement('div');\n        this.contextMenu.id = 'neighborhood-context-menu';\n        this.contextMenu.className = 'neighborhood-context-menu';\n        this.contextMenu.style.display = 'none';\n\n        this.contextMenu.innerHTML = `\n            <div class=\"context-menu-header\">\n                <div class=\"context-node-info\">\n                    <span class=\"context-node-icon\">üîç</span>\n                    <div class=\"context-node-details\">\n                        <div class=\"context-node-name\">Node Explorer</div>\n                        <div class=\"context-node-type\">Select exploration option</div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"context-menu-section\">\n                <div class=\"context-menu-title\">üåê Explore Neighborhood</div>\n                <div class=\"context-menu-items\">\n                    <button class=\"context-menu-item\" data-action=\"show-1-hop\">\n                        <span class=\"menu-icon\">üîµ</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Show 1-Hop</div>\n                            <div class=\"menu-description\">Direct connections</div>\n                        </div>\n                        <span class=\"menu-shortcut\">1</span>\n                    </button>\n                    \n                    <button class=\"context-menu-item\" data-action=\"show-2-hop\">\n                        <span class=\"menu-icon\">üî∑</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Show 2-Hop</div>\n                            <div class=\"menu-description\">Extended neighborhood</div>\n                        </div>\n                        <span class=\"menu-shortcut\">2</span>\n                    </button>\n                    \n                    <button class=\"context-menu-item\" data-action=\"show-all-connected\">\n                        <span class=\"menu-icon\">üåê</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Show All Connected</div>\n                            <div class=\"menu-description\">Complete component</div>\n                        </div>\n                        <span class=\"menu-shortcut\">A</span>\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"context-menu-section\">\n                <div class=\"context-menu-title\">üéØ Focus & Filter</div>\n                <div class=\"context-menu-items\">\n                    <button class=\"context-menu-item\" data-action=\"focus-on-node\">\n                        <span class=\"menu-icon\">üéØ</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Focus on Node</div>\n                            <div class=\"menu-description\">Center and zoom</div>\n                        </div>\n                        <span class=\"menu-shortcut\">F</span>\n                    </button>\n                    \n                    <button class=\"context-menu-item\" data-action=\"hide-others\">\n                        <span class=\"menu-icon\">üëÅÔ∏è</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Hide Others</div>\n                            <div class=\"menu-description\">Show only this neighborhood</div>\n                        </div>\n                        <span class=\"menu-shortcut\">H</span>\n                    </button>\n                    \n                    <button class=\"context-menu-item\" data-action=\"filter-by-type\">\n                        <span class=\"menu-icon\">üîß</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Filter by Type</div>\n                            <div class=\"menu-description\">Show similar nodes</div>\n                        </div>\n                        <span class=\"menu-shortcut\">T</span>\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"context-menu-section\">\n                <div class=\"context-menu-title\">üõ£Ô∏è Pathfinding</div>\n                <div class=\"context-menu-items\">\n                    <button class=\"context-menu-item\" data-action=\"start-path-finding\">\n                        <span class=\"menu-icon\">üìç</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Find Path From Here</div>\n                            <div class=\"menu-description\">Set as source node</div>\n                        </div>\n                        <span class=\"menu-shortcut\">P</span>\n                    </button>\n                    \n                    <button class=\"context-menu-item\" data-action=\"end-path-finding\">\n                        <span class=\"menu-icon\">üéØ</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Find Path To Here</div>\n                            <div class=\"menu-description\">Set as target node</div>\n                        </div>\n                        <span class=\"menu-shortcut\">E</span>\n                    </button>\n                    \n                    <button class=\"context-menu-item\" data-action=\"clear-paths\" id=\"clear-paths-item\">\n                        <span class=\"menu-icon\">üßπ</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Clear Paths</div>\n                            <div class=\"menu-description\">Remove all path highlights</div>\n                        </div>\n                        <span class=\"menu-shortcut\">C</span>\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"context-menu-section\">\n                <div class=\"context-menu-title\">üìä Analysis</div>\n                <div class=\"context-menu-items\">\n                    <button class=\"context-menu-item\" data-action=\"show-node-details\">\n                        <span class=\"menu-icon\">‚ÑπÔ∏è</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Node Details</div>\n                            <div class=\"menu-description\">View properties & stats</div>\n                        </div>\n                        <span class=\"menu-shortcut\">I</span>\n                    </button>\n                    \n                    <button class=\"context-menu-item\" data-action=\"analyze-centrality\">\n                        <span class=\"menu-icon\">üìà</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Centrality Analysis</div>\n                            <div class=\"menu-description\">Compute node importance</div>\n                        </div>\n                        <span class=\"menu-shortcut\">N</span>\n                    </button>\n                    \n                    <button class=\"context-menu-item\" data-action=\"export-neighborhood\">\n                        <span class=\"menu-icon\">üíæ</span>\n                        <div class=\"menu-content\">\n                            <div class=\"menu-label\">Export Neighborhood</div>\n                            <div class=\"menu-description\">Save as JSON/CSV</div>\n                        </div>\n                        <span class=\"menu-shortcut\">S</span>\n                    </button>\n                </div>\n            </div>\n\n            <div class=\"context-menu-footer\">\n                <div class=\"exploration-status\">\n                    <span class=\"status-label\">Explored:</span>\n                    <span class=\"explored-count\">0</span>\n                    <span class=\"status-separator\">‚Ä¢</span>\n                    <button class=\"clear-exploration-btn\" data-action=\"clear-exploration\">\n                        Clear History\n                    </button>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(this.contextMenu);\n    }\n\n    /**\n     * Add comprehensive styles for the neighborhood explorer\n     */\n    addExplorerStyles() {\n        if (document.querySelector('#neighborhood-explorer-styles')) {return;}\n\n        const style = document.createElement('style');\n        style.id = 'neighborhood-explorer-styles';\n        style.textContent = `\n            .neighborhood-context-menu {\n                position: fixed;\n                background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);\n                border: 1px solid #e1e8ed;\n                border-radius: 12px;\n                box-shadow: 0 12px 36px rgba(0,0,0,0.15), 0 0 0 1px rgba(255,255,255,0.5);\n                z-index: 10000;\n                min-width: 280px;\n                max-width: 320px;\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n                user-select: none;\n                backdrop-filter: blur(20px);\n                -webkit-backdrop-filter: blur(20px);\n            }\n\n            .context-menu-header {\n                padding: 16px;\n                border-bottom: 1px solid #f0f0f0;\n                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                color: white;\n                border-radius: 12px 12px 0 0;\n            }\n\n            .context-node-info {\n                display: flex;\n                align-items: center;\n                gap: 12px;\n            }\n\n            .context-node-icon {\n                font-size: 24px;\n                opacity: 0.9;\n            }\n\n            .context-node-name {\n                font-weight: 600;\n                font-size: 16px;\n                margin-bottom: 2px;\n            }\n\n            .context-node-type {\n                font-size: 12px;\n                opacity: 0.8;\n            }\n\n            .context-menu-section {\n                padding: 12px 0;\n                border-bottom: 1px solid #f0f0f0;\n            }\n\n            .context-menu-section:last-of-type {\n                border-bottom: none;\n            }\n\n            .context-menu-title {\n                font-size: 11px;\n                font-weight: 700;\n                color: #6c757d;\n                text-transform: uppercase;\n                letter-spacing: 0.8px;\n                padding: 0 16px 8px;\n                margin-bottom: 4px;\n            }\n\n            .context-menu-items {\n                display: flex;\n                flex-direction: column;\n            }\n\n            .context-menu-item {\n                display: flex;\n                align-items: center;\n                padding: 12px 16px;\n                background: none;\n                border: none;\n                cursor: pointer;\n                transition: all 0.15s ease;\n                color: #2c3e50;\n                text-align: left;\n                position: relative;\n            }\n\n            .context-menu-item:hover {\n                background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);\n            }\n\n            .context-menu-item:active {\n                background: #e9ecef;\n                transform: scale(0.98);\n            }\n\n            .context-menu-item:focus {\n                outline: 2px solid #3498db;\n                outline-offset: -2px;\n            }\n\n            .menu-icon {\n                font-size: 18px;\n                margin-right: 12px;\n                width: 24px;\n                text-align: center;\n                opacity: 0.8;\n            }\n\n            .menu-content {\n                flex: 1;\n                min-width: 0;\n            }\n\n            .menu-label {\n                font-weight: 500;\n                font-size: 14px;\n                margin-bottom: 2px;\n                color: #2c3e50;\n            }\n\n            .menu-description {\n                font-size: 11px;\n                color: #6c757d;\n                line-height: 1.3;\n            }\n\n            .menu-shortcut {\n                font-size: 11px;\n                color: #6c757d;\n                background: #f8f9fa;\n                padding: 3px 6px;\n                border-radius: 4px;\n                font-weight: 600;\n                margin-left: 8px;\n            }\n\n            .context-menu-footer {\n                padding: 12px 16px;\n                background: #f8f9fa;\n                border-radius: 0 0 12px 12px;\n                border-top: 1px solid #e9ecef;\n            }\n\n            .exploration-status {\n                display: flex;\n                align-items: center;\n                font-size: 11px;\n                color: #6c757d;\n            }\n\n            .status-label {\n                font-weight: 600;\n                margin-right: 4px;\n            }\n\n            .explored-count {\n                color: #3498db;\n                font-weight: 600;\n            }\n\n            .status-separator {\n                margin: 0 8px;\n                opacity: 0.5;\n            }\n\n            .clear-exploration-btn {\n                background: none;\n                border: none;\n                color: #e74c3c;\n                font-size: 11px;\n                cursor: pointer;\n                text-decoration: underline;\n                padding: 0;\n            }\n\n            .clear-exploration-btn:hover {\n                color: #c0392b;\n            }\n\n            /* Disabled state */\n            .context-menu-item:disabled {\n                opacity: 0.5;\n                cursor: not-allowed;\n            }\n\n            .context-menu-item:disabled:hover {\n                background: none;\n                transform: none;\n            }\n\n            /* Special highlighting for active path finding mode */\n            .context-menu-item[data-action=\"start-path-finding\"].active,\n            .context-menu-item[data-action=\"end-path-finding\"].active {\n                background: linear-gradient(90deg, #e3f2fd 0%, #bbdefb 100%);\n                color: #1976d2;\n            }\n\n            .context-menu-item[data-action=\"start-path-finding\"].active .menu-icon,\n            .context-menu-item[data-action=\"end-path-finding\"].active .menu-icon {\n                animation: pulse 2s infinite;\n            }\n\n            @keyframes pulse {\n                0%, 100% { opacity: 1; transform: scale(1); }\n                50% { opacity: 0.7; transform: scale(1.1); }\n            }\n\n            /* Dark theme support */\n            .theme-dark .neighborhood-context-menu {\n                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n                border-color: #4a5c6b;\n                color: #ecf0f1;\n            }\n\n            .theme-dark .context-menu-header {\n                background: linear-gradient(135deg, #8e44ad 0%, #3498db 100%);\n            }\n\n            .theme-dark .context-menu-section {\n                border-bottom-color: #4a5c6b;\n            }\n\n            .theme-dark .context-menu-item {\n                color: #ecf0f1;\n            }\n\n            .theme-dark .context-menu-item:hover {\n                background: linear-gradient(90deg, #34495e 0%, #4a5c6b 100%);\n            }\n\n            .theme-dark .menu-label {\n                color: #ecf0f1;\n            }\n\n            .theme-dark .menu-shortcut {\n                background: #34495e;\n                color: #bdc3c7;\n            }\n\n            .theme-dark .context-menu-footer {\n                background: #34495e;\n                border-top-color: #4a5c6b;\n            }\n\n            /* Animation for context menu appearance */\n            .neighborhood-context-menu {\n                animation: contextMenuSlide 0.2s ease-out;\n                transform-origin: top left;\n            }\n\n            @keyframes contextMenuSlide {\n                from {\n                    opacity: 0;\n                    transform: scale(0.95) translateY(-10px);\n                }\n                to {\n                    opacity: 1;\n                    transform: scale(1) translateY(0);\n                }\n            }\n\n            /* Path finding mode indicators */\n            .path-finding-source {\n                outline: 3px solid #4caf50 !important;\n                outline-offset: 2px;\n                animation: pathSourcePulse 2s infinite;\n            }\n\n            .path-finding-target {\n                outline: 3px solid #f44336 !important;\n                outline-offset: 2px;\n                animation: pathTargetPulse 2s infinite;\n            }\n\n            @keyframes pathSourcePulse {\n                0%, 100% { outline-color: #4caf50; }\n                50% { outline-color: #81c784; }\n            }\n\n            @keyframes pathTargetPulse {\n                0%, 100% { outline-color: #f44336; }\n                50% { outline-color: #e57373; }\n            }\n\n            /* Neighborhood highlight styles */\n            .neighborhood-1-hop {\n                stroke: #2196f3 !important;\n                stroke-width: 3px !important;\n                filter: drop-shadow(0 0 6px rgba(33, 150, 243, 0.5));\n            }\n\n            .neighborhood-2-hop {\n                stroke: #ff9800 !important;\n                stroke-width: 2px !important;\n                stroke-dasharray: 5,5;\n                filter: drop-shadow(0 0 4px rgba(255, 152, 0, 0.3));\n            }\n\n            .neighborhood-hidden {\n                opacity: 0.1 !important;\n                transition: opacity 0.3s ease;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n\n    /**\n     * Setup event listeners for the explorer\n     */\n    setupEventListeners() {\n        // Global click handler to hide context menu\n        document.addEventListener('click', (e) => {\n            if (!this.contextMenu.contains(e.target)) {\n                this.hideContextMenu();\n            }\n        });\n\n        // Context menu item clicks\n        this.contextMenu.addEventListener('click', (e) => {\n            const menuItem = e.target.closest('.context-menu-item');\n            if (menuItem) {\n                const action = menuItem.dataset.action;\n                this.handleMenuAction(action);\n                e.stopPropagation();\n            }\n        });\n\n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (this.contextMenu.style.display === 'block') {\n                this.handleKeyboardShortcut(e);\n            }\n        });\n\n        // Listen for graph node right-clicks\n        document.addEventListener('contextmenu', (e) => {\n            const nodeElement = e.target.closest('.node, [data-node-id]');\n            if (nodeElement) {\n                e.preventDefault();\n                this.showContextMenu(e, this.getNodeFromElement(nodeElement));\n            }\n        });\n\n        // Store subscriptions for data updates\n        store.subscribe('nodes', () => this.updateExplorationCount());\n        store.subscribe('selectedNode', (node) => {\n            if (node) {\n                this.currentNode = node;\n                this.updateContextMenuHeader();\n            }\n        });\n    }\n\n    /**\n     * Show context menu at specified position\n     */\n    showContextMenu(event, node) {\n        if (!node) {return;}\n\n        this.currentNode = node;\n        this.updateContextMenuHeader();\n        this.updateMenuStates();\n\n        // Position context menu\n        const x = event.pageX;\n        const y = event.pageY;\n\n        // Ensure menu stays within viewport\n        const menuRect = this.contextMenu.getBoundingClientRect();\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n\n        let finalX = x;\n        let finalY = y;\n\n        if (x + menuRect.width > viewportWidth) {\n            finalX = x - menuRect.width;\n        }\n\n        if (y + menuRect.height > viewportHeight) {\n            finalY = y - menuRect.height;\n        }\n\n        this.contextMenu.style.left = `${finalX}px`;\n        this.contextMenu.style.top = `${finalY}px`;\n        this.contextMenu.style.display = 'block';\n\n        // Focus first menu item for keyboard navigation\n        const firstItem = this.contextMenu.querySelector('.context-menu-item');\n        if (firstItem) {\n            setTimeout(() => firstItem.focus(), 100);\n        }\n    }\n\n    /**\n     * Hide context menu\n     */\n    hideContextMenu() {\n        this.contextMenu.style.display = 'none';\n        this.currentNode = null;\n    }\n\n    /**\n     * Update context menu header with current node info\n     */\n    updateContextMenuHeader() {\n        if (!this.currentNode) {return;}\n\n        const nodeIcon = this.getNodeIcon(this.currentNode.type);\n        const nodeName = this.currentNode.name || this.currentNode.label || this.currentNode.id;\n        const nodeType = this.currentNode.type || 'Unknown';\n\n        const iconElement = this.contextMenu.querySelector('.context-node-icon');\n        const nameElement = this.contextMenu.querySelector('.context-node-name');\n        const typeElement = this.contextMenu.querySelector('.context-node-type');\n\n        if (iconElement) {iconElement.textContent = nodeIcon;}\n        if (nameElement) {nameElement.textContent = nodeName;}\n        if (typeElement) {typeElement.textContent = nodeType;}\n    }\n\n    /**\n     * Update menu item states based on current context\n     */\n    updateMenuStates() {\n        // Update path finding states\n        const sourceBtn = this.contextMenu.querySelector('[data-action=\"start-path-finding\"]');\n        const targetBtn = this.contextMenu.querySelector('[data-action=\"end-path-finding\"]');\n        const clearBtn = this.contextMenu.querySelector('[data-action=\"clear-paths\"]');\n\n        if (this.pathFindingMode) {\n            if (this.pathFindingMode.source) {\n                sourceBtn?.classList.add('active');\n            }\n            if (this.pathFindingMode.target) {\n                targetBtn?.classList.add('active');\n            }\n            if (clearBtn) {clearBtn.disabled = false;}\n        } else {\n            sourceBtn?.classList.remove('active');\n            targetBtn?.classList.remove('active');\n            if (clearBtn) {clearBtn.disabled = true;}\n        }\n    }\n\n    /**\n     * Handle menu action selection\n     */\n    handleMenuAction(action) {\n        if (!this.currentNode && !['clear-exploration', 'clear-paths'].includes(action)) {\n            return;\n        }\n\n        switch (action) {\n        case 'show-1-hop':\n            this.showNeighborhood(1);\n            break;\n        case 'show-2-hop':\n            this.showNeighborhood(2);\n            break;\n        case 'show-all-connected':\n            this.showAllConnected();\n            break;\n        case 'focus-on-node':\n            this.focusOnNode();\n            break;\n        case 'hide-others':\n            this.hideOthers();\n            break;\n        case 'filter-by-type':\n            this.filterByType();\n            break;\n        case 'start-path-finding':\n            this.startPathFinding();\n            break;\n        case 'end-path-finding':\n            this.endPathFinding();\n            break;\n        case 'clear-paths':\n            this.clearPaths();\n            break;\n        case 'show-node-details':\n            this.showNodeDetails();\n            break;\n        case 'analyze-centrality':\n            this.analyzeCentrality();\n            break;\n        case 'export-neighborhood':\n            this.exportNeighborhood();\n            break;\n        case 'clear-exploration':\n            this.clearExploration();\n            break;\n        }\n\n        this.hideContextMenu();\n    }\n\n    /**\n     * Show neighborhood with specified hop count\n     */\n    showNeighborhood(hops = 1) {\n        const neighbors = search.findConnectedNodes(this.currentNode.id, { maxDepth: hops });\n\n        // Add current node to exploration history\n        this.exploredNodes.add(this.currentNode.id);\n        this.explorationHistory.push({\n            action: `show-${hops}-hop`,\n            nodeId: this.currentNode.id,\n            nodeName: this.currentNode.name || this.currentNode.id,\n            timestamp: Date.now(),\n            neighborCount: neighbors.length\n        });\n\n        // Trim history if needed\n        if (this.explorationHistory.length > this.maxHistorySize) {\n            this.explorationHistory = this.explorationHistory.slice(-this.maxHistorySize);\n        }\n\n        // Highlight the neighborhood\n        this.highlightNeighborhood(this.currentNode, neighbors, hops);\n\n        // Emit event for graph visualization\n        document.dispatchEvent(new CustomEvent('showNeighborhood', {\n            detail: {\n                sourceNode: this.currentNode,\n                neighbors,\n                hops,\n                highlightClass: `neighborhood-${hops}-hop`\n            }\n        }));\n\n        this.updateExplorationCount();\n\n        console.log(`üîç Showing ${hops}-hop neighborhood for \"${this.currentNode.name || this.currentNode.id}\": ${neighbors.length} neighbors`);\n    }\n\n    /**\n     * Show all connected nodes in the same component\n     */\n    showAllConnected() {\n        const allConnected = search.findConnectedNodes(this.currentNode.id, { maxDepth: Infinity });\n\n        this.exploredNodes.add(this.currentNode.id);\n        this.explorationHistory.push({\n            action: 'show-all-connected',\n            nodeId: this.currentNode.id,\n            nodeName: this.currentNode.name || this.currentNode.id,\n            timestamp: Date.now(),\n            neighborCount: allConnected.length\n        });\n\n        // Highlight entire connected component\n        this.highlightNeighborhood(this.currentNode, allConnected, 'all');\n\n        document.dispatchEvent(new CustomEvent('showAllConnected', {\n            detail: {\n                sourceNode: this.currentNode,\n                connectedNodes: allConnected\n            }\n        }));\n\n        this.updateExplorationCount();\n\n        console.log(`üåê Showing all connected nodes for \"${this.currentNode.name || this.currentNode.id}\": ${allConnected.length} total`);\n    }\n\n    /**\n     * Focus on the selected node\n     */\n    focusOnNode() {\n        document.dispatchEvent(new CustomEvent('focusOnNode', {\n            detail: {\n                node: this.currentNode,\n                centerAndZoom: true\n            }\n        }));\n\n        console.log(`üéØ Focusing on node: ${this.currentNode.name || this.currentNode.id}`);\n    }\n\n    /**\n     * Hide all other nodes except neighborhood\n     */\n    hideOthers() {\n        const neighbors = search.findConnectedNodes(this.currentNode.id, { maxDepth: 2 });\n        const visibleNodeIds = new Set([this.currentNode.id, ...neighbors.map(n => n.id)]);\n\n        document.dispatchEvent(new CustomEvent('hideOtherNodes', {\n            detail: {\n                visibleNodeIds,\n                sourceNode: this.currentNode\n            }\n        }));\n\n        console.log(`üëÅÔ∏è Hiding others, showing only neighborhood of ${neighbors.length + 1} nodes`);\n    }\n\n    /**\n     * Filter nodes by the same type as current node\n     */\n    filterByType() {\n        if (!this.currentNode.type) {\n            console.warn('Node has no type property');\n            return;\n        }\n\n        document.dispatchEvent(new CustomEvent('filterByNodeType', {\n            detail: {\n                nodeType: this.currentNode.type,\n                sourceNode: this.currentNode\n            }\n        }));\n\n        console.log(`üîß Filtering by type: ${this.currentNode.type}`);\n    }\n\n    /**\n     * Start path finding mode (set as source)\n     */\n    startPathFinding() {\n        if (!this.pathFindingMode) {\n            this.pathFindingMode = {};\n        }\n\n        this.pathFindingMode.source = this.currentNode;\n\n        // Visual indicator\n        document.dispatchEvent(new CustomEvent('setPathFindingSource', {\n            detail: { sourceNode: this.currentNode }\n        }));\n\n        console.log(`üìç Set path finding source: ${this.currentNode.name || this.currentNode.id}`);\n\n        // Check if we can complete a path\n        if (this.pathFindingMode.target) {\n            this.findPath();\n        }\n    }\n\n    /**\n     * End path finding mode (set as target)\n     */\n    endPathFinding() {\n        if (!this.pathFindingMode) {\n            this.pathFindingMode = {};\n        }\n\n        this.pathFindingMode.target = this.currentNode;\n\n        // Visual indicator\n        document.dispatchEvent(new CustomEvent('setPathFindingTarget', {\n            detail: { targetNode: this.currentNode }\n        }));\n\n        console.log(`üéØ Set path finding target: ${this.currentNode.name || this.currentNode.id}`);\n\n        // Check if we can complete a path\n        if (this.pathFindingMode.source) {\n            this.findPath();\n        }\n    }\n\n    /**\n     * Find and highlight shortest path\n     */\n    findPath() {\n        if (!this.pathFindingMode?.source || !this.pathFindingMode?.target) {\n            return;\n        }\n\n        const path = search.findPath(\n            this.pathFindingMode.source.id,\n            this.pathFindingMode.target.id\n        );\n\n        if (path) {\n            document.dispatchEvent(new CustomEvent('showShortestPath', {\n                detail: {\n                    path,\n                    sourceNode: this.pathFindingMode.source,\n                    targetNode: this.pathFindingMode.target\n                }\n            }));\n\n            console.log(`üõ£Ô∏è Found path: ${path.length} nodes, ${path.length - 1} edges`);\n        } else {\n            document.dispatchEvent(new CustomEvent('pathNotFound', {\n                detail: {\n                    sourceNode: this.pathFindingMode.source,\n                    targetNode: this.pathFindingMode.target\n                }\n            }));\n\n            console.log('‚ùå No path found between nodes');\n        }\n    }\n\n    /**\n     * Clear all path finding highlights\n     */\n    clearPaths() {\n        this.pathFindingMode = null;\n\n        document.dispatchEvent(new CustomEvent('clearPathHighlights'));\n\n        console.log('üßπ Cleared all path highlights');\n    }\n\n    /**\n     * Show detailed node information\n     */\n    showNodeDetails() {\n        // Select the node to update details panel\n        store.setState({ selectedNode: this.currentNode });\n\n        // Also emit event for any custom detail views\n        document.dispatchEvent(new CustomEvent('showNodeDetails', {\n            detail: {\n                node: this.currentNode,\n                expandedView: true\n            }\n        }));\n\n        console.log(`‚ÑπÔ∏è Showing details for: ${this.currentNode.name || this.currentNode.id}`);\n    }\n\n    /**\n     * Analyze node centrality measures\n     */\n    analyzeCentrality() {\n        const { nodes, edges } = store.getState();\n\n        // Calculate basic centrality measures\n        const degree = edges.filter(e =>\n            e.source === this.currentNode.id || e.target === this.currentNode.id\n        ).length;\n\n        const neighbors = search.findConnectedNodes(this.currentNode.id, { maxDepth: 1 });\n        const twoHopNeighbors = search.findConnectedNodes(this.currentNode.id, { maxDepth: 2 });\n\n        const centralityData = {\n            node: this.currentNode,\n            degree,\n            closeness: neighbors.length / (nodes.length - 1), // Simplified closeness\n            betweenness: this.calculateBetweennessCentrality(this.currentNode.id),\n            clustering: this.calculateClusteringCoefficient(this.currentNode.id),\n            neighborhoodSizes: {\n                oneHop: neighbors.length,\n                twoHop: twoHopNeighbors.length\n            }\n        };\n\n        document.dispatchEvent(new CustomEvent('showCentralityAnalysis', {\n            detail: centralityData\n        }));\n\n        console.log(`üìà Centrality analysis for ${this.currentNode.name || this.currentNode.id}:`, centralityData);\n    }\n\n    /**\n     * Export neighborhood data\n     */\n    exportNeighborhood() {\n        const neighbors = search.findConnectedNodes(this.currentNode.id, { maxDepth: 2 });\n        const { edges } = store.getState();\n\n        // Get edges within the neighborhood\n        const nodeIds = new Set([this.currentNode.id, ...neighbors.map(n => n.id)]);\n        const neighborhoodEdges = edges.filter(edge =>\n            nodeIds.has(edge.source) && nodeIds.has(edge.target)\n        );\n\n        const exportData = {\n            centerNode: this.currentNode,\n            neighbors,\n            edges: neighborhoodEdges,\n            metadata: {\n                exportedAt: new Date().toISOString(),\n                totalNodes: neighbors.length + 1,\n                totalEdges: neighborhoodEdges.length\n            }\n        };\n\n        document.dispatchEvent(new CustomEvent('exportNeighborhoodData', {\n            detail: exportData\n        }));\n\n        // Also trigger download\n        this.downloadNeighborhoodData(exportData);\n\n        console.log(`üíæ Exported neighborhood data: ${exportData.metadata.totalNodes} nodes, ${exportData.metadata.totalEdges} edges`);\n    }\n\n    /**\n     * Download neighborhood data as JSON\n     */\n    downloadNeighborhoodData(data) {\n        const filename = `neighborhood_${this.currentNode.id}_${Date.now()}.json`;\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = filename;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n    }\n\n    /**\n     * Clear exploration history\n     */\n    clearExploration() {\n        this.exploredNodes.clear();\n        this.explorationHistory = [];\n\n        // Clear all visual highlights\n        document.dispatchEvent(new CustomEvent('clearAllHighlights'));\n\n        this.updateExplorationCount();\n\n        console.log('üßπ Cleared exploration history');\n    }\n\n    /**\n     * Handle keyboard shortcuts in context menu\n     */\n    handleKeyboardShortcut(e) {\n        const key = e.key.toLowerCase();\n\n        const actionMap = {\n            '1': 'show-1-hop',\n            '2': 'show-2-hop',\n            'a': 'show-all-connected',\n            'f': 'focus-on-node',\n            'h': 'hide-others',\n            't': 'filter-by-type',\n            'p': 'start-path-finding',\n            'e': 'end-path-finding',\n            'c': 'clear-paths',\n            'i': 'show-node-details',\n            'n': 'analyze-centrality',\n            's': 'export-neighborhood'\n        };\n\n        if (actionMap[key]) {\n            e.preventDefault();\n            this.handleMenuAction(actionMap[key]);\n        } else if (e.key === 'Escape') {\n            this.hideContextMenu();\n        }\n    }\n\n    /**\n     * Highlight neighborhood visually\n     */\n    highlightNeighborhood(centerNode, neighbors, hops) {\n        // This would integrate with the graph visualization\n        const highlightClass = hops === 'all' ? 'neighborhood-all' : `neighborhood-${hops}-hop`;\n\n        // Emit event for graph to handle visual highlighting\n        document.dispatchEvent(new CustomEvent('highlightGraphNeighborhood', {\n            detail: {\n                centerNode,\n                neighbors,\n                highlightClass,\n                hops\n            }\n        }));\n    }\n\n    /**\n     * Update exploration count display\n     */\n    updateExplorationCount() {\n        const countElement = this.contextMenu.querySelector('.explored-count');\n        if (countElement) {\n            countElement.textContent = this.exploredNodes.size;\n        }\n    }\n\n    /**\n     * Get node icon based on type\n     */\n    getNodeIcon(nodeType) {\n        const icons = {\n            'faa_stars_terminal': 'üè¢',\n            'approach_control': 'üõ´',\n            'faa_eram_terminal': 'üì°',\n            'geographic_location': 'üìç',\n            'radar_equipment': 'üìä',\n            'communication_equipment': 'üìª'\n        };\n\n        return icons[nodeType] || '‚óâ';\n    }\n\n    /**\n     * Extract node data from DOM element\n     */\n    getNodeFromElement(element) {\n        // This would depend on how the graph is implemented\n        const nodeId = element.dataset.nodeId || element.getAttribute('data-node-id');\n        if (!nodeId) {return null;}\n\n        const { nodes } = store.getState();\n        return nodes.find(node => node.id.toString() === nodeId.toString());\n    }\n\n    /**\n     * Calculate betweenness centrality (simplified)\n     */\n    calculateBetweennessCentrality(nodeId) {\n        // Simplified betweenness calculation\n        // In a full implementation, this would use proper shortest-path algorithms\n        const neighbors = search.findConnectedNodes(nodeId, { maxDepth: 1 });\n        return neighbors.length > 1 ? neighbors.length / 10 : 0; // Placeholder\n    }\n\n    /**\n     * Calculate clustering coefficient\n     */\n    calculateClusteringCoefficient(nodeId) {\n        const neighbors = search.findConnectedNodes(nodeId, { maxDepth: 1 });\n        if (neighbors.length < 2) {return 0;}\n\n        const { edges } = store.getState();\n        const neighborIds = new Set(neighbors.map(n => n.id));\n\n        // Count edges between neighbors\n        let edgesBetweenNeighbors = 0;\n        edges.forEach(edge => {\n            if (neighborIds.has(edge.source) && neighborIds.has(edge.target)) {\n                edgesBetweenNeighbors++;\n            }\n        });\n\n        const possibleEdges = (neighbors.length * (neighbors.length - 1)) / 2;\n        return possibleEdges > 0 ? edgesBetweenNeighbors / possibleEdges : 0;\n    }\n\n    /**\n     * Get exploration history\n     */\n    getExplorationHistory() {\n        return [...this.explorationHistory];\n    }\n\n    /**\n     * Get currently explored nodes\n     */\n    getExploredNodes() {\n        return new Set(this.exploredNodes);\n    }\n\n    /**\n     * Destroy the neighborhood explorer\n     */\n    destroy() {\n        if (this.contextMenu && document.body.contains(this.contextMenu)) {\n            document.body.removeChild(this.contextMenu);\n        }\n\n        this.exploredNodes.clear();\n        this.explorationHistory = [];\n        this.pathFindingMode = null;\n        this.currentNode = null;\n    }\n}\n\nexport default NeighborhoodExplorer;\n","/**\n * Path Finder Component\n * Advanced shortest-path algorithms for finding routes between nodes\n */\n\nimport { store } from '../core/store.js';\nimport { search } from '../utils/search.js';\n\nexport class PathFinder {\n    constructor() {\n        this.algorithms = {\n            'dijkstra': this.dijkstra.bind(this),\n            'bfs': this.breadthFirstSearch.bind(this),\n            'astar': this.aStar.bind(this),\n            'bidirectional': this.bidirectionalSearch.bind(this)\n        };\n\n        this.currentAlgorithm = 'dijkstra';\n        this.pathCache = new Map();\n        this.maxCacheSize = 1000;\n        this.pathHistory = [];\n        this.maxHistorySize = 50;\n\n        this.setupEventListeners();\n    }\n\n    /**\n     * Setup event listeners for pathfinding\n     */\n    setupEventListeners() {\n        // Listen for pathfinding requests\n        document.addEventListener('findPath', (e) => {\n            const { sourceId, targetId, algorithm, options } = e.detail;\n            this.findPath(sourceId, targetId, algorithm, options);\n        });\n\n        // Listen for shortest path requests from neighborhood explorer\n        document.addEventListener('setPathFindingSource', (e) => {\n            this.pathSource = e.detail.sourceNode;\n            this.updatePathFindingUI();\n        });\n\n        document.addEventListener('setPathFindingTarget', (e) => {\n            this.pathTarget = e.detail.targetNode;\n            this.updatePathFindingUI();\n\n            // If both source and target are set, find path\n            if (this.pathSource) {\n                this.findPath(this.pathSource.id, this.pathTarget.id);\n            }\n        });\n\n        document.addEventListener('clearPathHighlights', () => {\n            this.clearAllPaths();\n        });\n    }\n\n    /**\n     * Main pathfinding method\n     */\n    findPath(sourceId, targetId, algorithm = this.currentAlgorithm, options = {}) {\n        console.log(`üõ£Ô∏è Finding path from ${sourceId} to ${targetId} using ${algorithm}`);\n\n        // Check cache first\n        const cacheKey = `${sourceId}-${targetId}-${algorithm}-${JSON.stringify(options)}`;\n        const cached = this.pathCache.get(cacheKey);\n\n        if (cached) {\n            console.log('üìã Using cached path');\n            this.displayPath(cached);\n            return cached;\n        }\n\n        const startTime = performance.now();\n        const pathResult = this.algorithms[algorithm](sourceId, targetId, options);\n        const endTime = performance.now();\n\n        if (pathResult.path) {\n            // Cache the result\n            this.cachePathResult(cacheKey, pathResult);\n\n            // Add to history\n            this.addToHistory({\n                sourceId,\n                targetId,\n                algorithm,\n                path: pathResult.path,\n                distance: pathResult.distance,\n                computeTime: endTime - startTime,\n                timestamp: Date.now()\n            });\n\n            // Display the path\n            this.displayPath(pathResult);\n\n            console.log(`‚úÖ Path found: ${pathResult.path.length} nodes, distance: ${pathResult.distance.toFixed(2)}, time: ${(endTime - startTime).toFixed(2)}ms`);\n        } else {\n            console.log('‚ùå No path found');\n            document.dispatchEvent(new CustomEvent('pathNotFound', {\n                detail: { sourceId, targetId, algorithm, computeTime: endTime - startTime }\n            }));\n        }\n\n        return pathResult;\n    }\n\n    /**\n     * Dijkstra's shortest path algorithm\n     */\n    dijkstra(sourceId, targetId, options = {}) {\n        const { nodes, edges } = store.getState();\n        const { weightProperty = null, maxDistance = Infinity } = options;\n\n        // Build adjacency list with weights\n        const graph = this.buildWeightedGraph(nodes, edges, weightProperty);\n\n        // Initialize distances and previous nodes\n        const distances = new Map();\n        const previous = new Map();\n        const visited = new Set();\n        const unvisited = new Set();\n\n        // Initialize all distances to infinity except source\n        nodes.forEach(node => {\n            distances.set(node.id, node.id === sourceId ? 0 : Infinity);\n            unvisited.add(node.id);\n        });\n\n        while (unvisited.size > 0) {\n            // Find unvisited node with minimum distance\n            let current = null;\n            let minDistance = Infinity;\n\n            for (const nodeId of unvisited) {\n                const distance = distances.get(nodeId);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    current = nodeId;\n                }\n            }\n\n            if (current === null || minDistance === Infinity) {break;}\n            if (current === targetId) {break;} // Found target\n            if (minDistance > maxDistance) {break;} // Exceeded max distance\n\n            unvisited.delete(current);\n            visited.add(current);\n\n            // Update neighbors\n            const neighbors = graph.get(current) || [];\n            for (const { nodeId: neighbor, weight } of neighbors) {\n                if (visited.has(neighbor)) {continue;}\n\n                const altDistance = distances.get(current) + weight;\n                if (altDistance < distances.get(neighbor)) {\n                    distances.set(neighbor, altDistance);\n                    previous.set(neighbor, current);\n                }\n            }\n        }\n\n        // Reconstruct path\n        const path = this.reconstructPath(previous, sourceId, targetId);\n        const distance = distances.get(targetId);\n\n        return {\n            path: distance === Infinity ? null : path,\n            distance: distance === Infinity ? null : distance,\n            algorithm: 'dijkstra',\n            visited: visited.size,\n            sourceId,\n            targetId\n        };\n    }\n\n    /**\n     * Breadth-First Search (BFS) for unweighted shortest path\n     */\n    breadthFirstSearch(sourceId, targetId, options = {}) {\n        const { nodes, edges } = store.getState();\n        const { maxHops = Infinity } = options;\n\n        const graph = this.buildGraph(nodes, edges);\n        const queue = [{ nodeId: sourceId, path: [sourceId], distance: 0 }];\n        const visited = new Set([sourceId]);\n\n        while (queue.length > 0) {\n            const { nodeId, path, distance } = queue.shift();\n\n            if (nodeId === targetId) {\n                return {\n                    path,\n                    distance,\n                    algorithm: 'bfs',\n                    visited: visited.size,\n                    sourceId,\n                    targetId\n                };\n            }\n\n            if (distance >= maxHops) {continue;}\n\n            const neighbors = graph.get(nodeId) || [];\n            for (const neighborId of neighbors) {\n                if (!visited.has(neighborId)) {\n                    visited.add(neighborId);\n                    queue.push({\n                        nodeId: neighborId,\n                        path: [...path, neighborId],\n                        distance: distance + 1\n                    });\n                }\n            }\n        }\n\n        return {\n            path: null,\n            distance: null,\n            algorithm: 'bfs',\n            visited: visited.size,\n            sourceId,\n            targetId\n        };\n    }\n\n    /**\n     * A* algorithm with heuristic\n     */\n    aStar(sourceId, targetId, options = {}) {\n        const { nodes, edges } = store.getState();\n        const { weightProperty = null, heuristicFunction } = options;\n\n        const graph = this.buildWeightedGraph(nodes, edges, weightProperty);\n        const nodeMap = new Map(nodes.map(node => [node.id, node]));\n\n        // Default heuristic: Euclidean distance if nodes have coordinates\n        const heuristic = heuristicFunction || ((nodeId1, nodeId2) => {\n            const node1 = nodeMap.get(nodeId1);\n            const node2 = nodeMap.get(nodeId2);\n\n            if (node1?.x !== undefined && node1?.y !== undefined &&\n                node2?.x !== undefined && node2?.y !== undefined) {\n                return Math.sqrt(\n                    Math.pow(node2.x - node1.x, 2) + Math.pow(node2.y - node1.y, 2)\n                );\n            }\n\n            // Fallback: connection-based heuristic\n            return this.getConnectionDistance(nodeId1, nodeId2);\n        });\n\n        const openSet = new Set([sourceId]);\n        const closedSet = new Set();\n        const gScore = new Map([[sourceId, 0]]);\n        const fScore = new Map([[sourceId, heuristic(sourceId, targetId)]]);\n        const cameFrom = new Map();\n\n        while (openSet.size > 0) {\n            // Find node with lowest fScore\n            let current = null;\n            let lowestF = Infinity;\n\n            for (const nodeId of openSet) {\n                const f = fScore.get(nodeId) || Infinity;\n                if (f < lowestF) {\n                    lowestF = f;\n                    current = nodeId;\n                }\n            }\n\n            if (current === targetId) {\n                const path = this.reconstructPath(cameFrom, sourceId, targetId);\n                return {\n                    path,\n                    distance: gScore.get(targetId),\n                    algorithm: 'astar',\n                    visited: closedSet.size,\n                    sourceId,\n                    targetId\n                };\n            }\n\n            openSet.delete(current);\n            closedSet.add(current);\n\n            const neighbors = graph.get(current) || [];\n            for (const { nodeId: neighbor, weight } of neighbors) {\n                if (closedSet.has(neighbor)) {continue;}\n\n                const tentativeG = gScore.get(current) + weight;\n\n                if (!openSet.has(neighbor)) {\n                    openSet.add(neighbor);\n                } else if (tentativeG >= (gScore.get(neighbor) || Infinity)) {\n                    continue;\n                }\n\n                cameFrom.set(neighbor, current);\n                gScore.set(neighbor, tentativeG);\n                fScore.set(neighbor, tentativeG + heuristic(neighbor, targetId));\n            }\n        }\n\n        return {\n            path: null,\n            distance: null,\n            algorithm: 'astar',\n            visited: closedSet.size,\n            sourceId,\n            targetId\n        };\n    }\n\n    /**\n     * Bidirectional search\n     */\n    bidirectionalSearch(sourceId, targetId, options = {}) {\n        const { nodes, edges } = store.getState();\n        const { maxDistance = Infinity } = options;\n\n        const graph = this.buildGraph(nodes, edges);\n\n        // Forward search from source\n        const forwardQueue = [{ nodeId: sourceId, path: [sourceId], distance: 0 }];\n        const forwardVisited = new Map([[sourceId, { path: [sourceId], distance: 0 }]]);\n\n        // Backward search from target\n        const backwardQueue = [{ nodeId: targetId, path: [targetId], distance: 0 }];\n        const backwardVisited = new Map([[targetId, { path: [targetId], distance: 0 }]]);\n\n        while (forwardQueue.length > 0 || backwardQueue.length > 0) {\n            // Expand forward search\n            if (forwardQueue.length > 0) {\n                const { nodeId, path, distance } = forwardQueue.shift();\n\n                if (backwardVisited.has(nodeId)) {\n                    // Found intersection\n                    const backwardData = backwardVisited.get(nodeId);\n                    const completePath = [\n                        ...path,\n                        ...backwardData.path.slice(1).reverse()\n                    ];\n                    const totalDistance = distance + backwardData.distance;\n\n                    return {\n                        path: completePath,\n                        distance: totalDistance,\n                        algorithm: 'bidirectional',\n                        visited: forwardVisited.size + backwardVisited.size,\n                        sourceId,\n                        targetId\n                    };\n                }\n\n                if (distance < maxDistance) {\n                    const neighbors = graph.get(nodeId) || [];\n                    for (const neighborId of neighbors) {\n                        if (!forwardVisited.has(neighborId)) {\n                            const newPath = [...path, neighborId];\n                            const newDistance = distance + 1;\n                            forwardVisited.set(neighborId, { path: newPath, distance: newDistance });\n                            forwardQueue.push({ nodeId: neighborId, path: newPath, distance: newDistance });\n                        }\n                    }\n                }\n            }\n\n            // Expand backward search\n            if (backwardQueue.length > 0) {\n                const { nodeId, path, distance } = backwardQueue.shift();\n\n                if (forwardVisited.has(nodeId)) {\n                    // Found intersection\n                    const forwardData = forwardVisited.get(nodeId);\n                    const completePath = [\n                        ...forwardData.path,\n                        ...path.slice(1).reverse()\n                    ];\n                    const totalDistance = forwardData.distance + distance;\n\n                    return {\n                        path: completePath,\n                        distance: totalDistance,\n                        algorithm: 'bidirectional',\n                        visited: forwardVisited.size + backwardVisited.size,\n                        sourceId,\n                        targetId\n                    };\n                }\n\n                if (distance < maxDistance) {\n                    const neighbors = graph.get(nodeId) || [];\n                    for (const neighborId of neighbors) {\n                        if (!backwardVisited.has(neighborId)) {\n                            const newPath = [...path, neighborId];\n                            const newDistance = distance + 1;\n                            backwardVisited.set(neighborId, { path: newPath, distance: newDistance });\n                            backwardQueue.push({ nodeId: neighborId, path: newPath, distance: newDistance });\n                        }\n                    }\n                }\n            }\n        }\n\n        return {\n            path: null,\n            distance: null,\n            algorithm: 'bidirectional',\n            visited: forwardVisited.size + backwardVisited.size,\n            sourceId,\n            targetId\n        };\n    }\n\n    /**\n     * Find multiple alternative paths\n     */\n    findAlternativePaths(sourceId, targetId, options = {}) {\n        const { maxPaths = 3, diversityThreshold = 0.5 } = options;\n        const paths = [];\n\n        // Get primary path\n        const primaryPath = this.findPath(sourceId, targetId, this.currentAlgorithm, options);\n        if (primaryPath.path) {\n            paths.push(primaryPath);\n        }\n\n        // Find alternative paths by temporarily removing edges\n        const { edges } = store.getState();\n        const originalEdges = [...edges];\n\n        for (let i = 1; i < maxPaths && primaryPath.path; i++) {\n            // Remove edges from the primary path\n            const edgesToRemove = this.getPathEdges(primaryPath.path);\n            const filteredEdges = originalEdges.filter(edge =>\n                !edgesToRemove.some(pathEdge =>\n                    (edge.source === pathEdge.source && edge.target === pathEdge.target) ||\n                    (edge.source === pathEdge.target && edge.target === pathEdge.source)\n                )\n            );\n\n            // Temporarily update store\n            store.setState({ edges: filteredEdges }, false);\n\n            // Find alternative path\n            const altPath = this.findPath(sourceId, targetId, this.currentAlgorithm, options);\n\n            if (altPath.path && this.isPathDiverse(altPath.path, paths, diversityThreshold)) {\n                paths.push(altPath);\n            }\n        }\n\n        // Restore original edges\n        store.setState({ edges: originalEdges }, false);\n\n        return paths;\n    }\n\n    /**\n     * Find all simple paths between two nodes\n     */\n    findAllSimplePaths(sourceId, targetId, maxLength = 10) {\n        const { nodes, edges } = store.getState();\n        const graph = this.buildGraph(nodes, edges);\n        const allPaths = [];\n\n        const dfs = (currentId, target, path, visited) => {\n            if (path.length > maxLength) {return;}\n            if (currentId === target) {\n                allPaths.push([...path]);\n                return;\n            }\n\n            const neighbors = graph.get(currentId) || [];\n            for (const neighborId of neighbors) {\n                if (!visited.has(neighborId)) {\n                    visited.add(neighborId);\n                    path.push(neighborId);\n                    dfs(neighborId, target, path, visited);\n                    path.pop();\n                    visited.delete(neighborId);\n                }\n            }\n        };\n\n        dfs(sourceId, targetId, [sourceId], new Set([sourceId]));\n\n        // Sort by length\n        allPaths.sort((a, b) => a.length - b.length);\n\n        return allPaths.map(path => ({\n            path,\n            distance: path.length - 1,\n            algorithm: 'all-simple-paths'\n        }));\n    }\n\n    /**\n     * Build unweighted graph adjacency list\n     */\n    buildGraph(nodes, edges) {\n        const graph = new Map();\n\n        // Initialize all nodes\n        nodes.forEach(node => {\n            graph.set(node.id, []);\n        });\n\n        // Add edges\n        edges.forEach(edge => {\n            const sourceList = graph.get(edge.source) || [];\n            const targetList = graph.get(edge.target) || [];\n\n            sourceList.push(edge.target);\n            targetList.push(edge.source); // Assuming undirected graph\n\n            graph.set(edge.source, sourceList);\n            graph.set(edge.target, targetList);\n        });\n\n        return graph;\n    }\n\n    /**\n     * Build weighted graph adjacency list\n     */\n    buildWeightedGraph(nodes, edges, weightProperty = null) {\n        const graph = new Map();\n\n        // Initialize all nodes\n        nodes.forEach(node => {\n            graph.set(node.id, []);\n        });\n\n        // Add weighted edges\n        edges.forEach(edge => {\n            const weight = weightProperty && edge[weightProperty]\n                ? parseFloat(edge[weightProperty])\n                : 1;\n\n            const sourceList = graph.get(edge.source) || [];\n            const targetList = graph.get(edge.target) || [];\n\n            sourceList.push({ nodeId: edge.target, weight });\n            targetList.push({ nodeId: edge.source, weight }); // Undirected\n\n            graph.set(edge.source, sourceList);\n            graph.set(edge.target, targetList);\n        });\n\n        return graph;\n    }\n\n    /**\n     * Reconstruct path from previous nodes map\n     */\n    reconstructPath(previous, sourceId, targetId) {\n        const path = [];\n        let current = targetId;\n\n        while (current !== undefined) {\n            path.unshift(current);\n            current = previous.get(current);\n        }\n\n        return path[0] === sourceId ? path : null;\n    }\n\n    /**\n     * Get connection-based distance between nodes (heuristic)\n     */\n    getConnectionDistance(nodeId1, nodeId2) {\n        // Simple heuristic based on node IDs or properties\n        // In a real application, this could use more sophisticated metrics\n        return Math.abs(nodeId1.toString().length - nodeId2.toString().length) + 1;\n    }\n\n    /**\n     * Get edges that form a path\n     */\n    getPathEdges(path) {\n        const edges = [];\n        for (let i = 0; i < path.length - 1; i++) {\n            edges.push({\n                source: path[i],\n                target: path[i + 1]\n            });\n        }\n        return edges;\n    }\n\n    /**\n     * Check if a path is diverse enough from existing paths\n     */\n    isPathDiverse(newPath, existingPaths, threshold) {\n        for (const existingPath of existingPaths) {\n            const similarity = this.calculatePathSimilarity(newPath, existingPath.path);\n            if (similarity > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Calculate similarity between two paths (Jaccard similarity)\n     */\n    calculatePathSimilarity(path1, path2) {\n        const set1 = new Set(path1);\n        const set2 = new Set(path2);\n\n        const intersection = new Set([...set1].filter(x => set2.has(x)));\n        const union = new Set([...set1, ...set2]);\n\n        return intersection.size / union.size;\n    }\n\n    /**\n     * Display path in visualization\n     */\n    displayPath(pathResult) {\n        if (!pathResult.path) {return;}\n\n        document.dispatchEvent(new CustomEvent('showShortestPath', {\n            detail: {\n                path: pathResult.path,\n                distance: pathResult.distance,\n                algorithm: pathResult.algorithm,\n                visited: pathResult.visited,\n                sourceId: pathResult.sourceId,\n                targetId: pathResult.targetId\n            }\n        }));\n    }\n\n    /**\n     * Cache path result\n     */\n    cachePathResult(key, result) {\n        if (this.pathCache.size >= this.maxCacheSize) {\n            // Remove oldest entry\n            const firstKey = this.pathCache.keys().next().value;\n            this.pathCache.delete(firstKey);\n        }\n\n        this.pathCache.set(key, result);\n    }\n\n    /**\n     * Add path to history\n     */\n    addToHistory(pathInfo) {\n        this.pathHistory.unshift(pathInfo);\n\n        if (this.pathHistory.length > this.maxHistorySize) {\n            this.pathHistory = this.pathHistory.slice(0, this.maxHistorySize);\n        }\n    }\n\n    /**\n     * Update pathfinding UI state\n     */\n    updatePathFindingUI() {\n        document.dispatchEvent(new CustomEvent('pathFindingStateUpdated', {\n            detail: {\n                source: this.pathSource,\n                target: this.pathTarget,\n                hasSource: !!this.pathSource,\n                hasTarget: !!this.pathTarget,\n                canFindPath: !!(this.pathSource && this.pathTarget)\n            }\n        }));\n    }\n\n    /**\n     * Clear all paths and reset state\n     */\n    clearAllPaths() {\n        this.pathSource = null;\n        this.pathTarget = null;\n        this.updatePathFindingUI();\n\n        document.dispatchEvent(new CustomEvent('clearAllPaths'));\n\n        console.log('üßπ All paths cleared');\n    }\n\n    /**\n     * Get path statistics\n     */\n    getPathStatistics() {\n        return {\n            cacheSize: this.pathCache.size,\n            maxCacheSize: this.maxCacheSize,\n            historySize: this.pathHistory.length,\n            maxHistorySize: this.maxHistorySize,\n            currentAlgorithm: this.currentAlgorithm,\n            availableAlgorithms: Object.keys(this.algorithms)\n        };\n    }\n\n    /**\n     * Analyze graph connectivity\n     */\n    analyzeConnectivity() {\n        const { nodes, edges } = store.getState();\n        const graph = this.buildGraph(nodes, edges);\n\n        // Find connected components\n        const components = [];\n        const visited = new Set();\n\n        nodes.forEach(node => {\n            if (!visited.has(node.id)) {\n                const component = [];\n                const queue = [node.id];\n\n                while (queue.length > 0) {\n                    const currentId = queue.shift();\n                    if (visited.has(currentId)) {continue;}\n\n                    visited.add(currentId);\n                    component.push(currentId);\n\n                    const neighbors = graph.get(currentId) || [];\n                    neighbors.forEach(neighborId => {\n                        if (!visited.has(neighborId)) {\n                            queue.push(neighborId);\n                        }\n                    });\n                }\n\n                components.push(component);\n            }\n        });\n\n        // Calculate statistics\n        const componentSizes = components.map(comp => comp.length);\n        const largestComponent = Math.max(...componentSizes);\n        const totalNodes = nodes.length;\n        const totalEdges = edges.length;\n        const density = totalNodes > 1 ? (2 * totalEdges) / (totalNodes * (totalNodes - 1)) : 0;\n\n        return {\n            totalNodes,\n            totalEdges,\n            density,\n            numComponents: components.length,\n            componentSizes,\n            largestComponent,\n            largestComponentRatio: largestComponent / totalNodes,\n            isConnected: components.length === 1,\n            components: components.map(comp => ({\n                size: comp.length,\n                nodes: comp\n            }))\n        };\n    }\n\n    /**\n     * Set pathfinding algorithm\n     */\n    setAlgorithm(algorithm) {\n        if (this.algorithms[algorithm]) {\n            this.currentAlgorithm = algorithm;\n            console.log(`üîÑ Pathfinding algorithm set to: ${algorithm}`);\n        } else {\n            console.warn(`Unknown algorithm: ${algorithm}`);\n        }\n    }\n\n    /**\n     * Get path history\n     */\n    getPathHistory() {\n        return [...this.pathHistory];\n    }\n\n    /**\n     * Clear path cache\n     */\n    clearCache() {\n        this.pathCache.clear();\n        console.log('üßπ Path cache cleared');\n    }\n\n    /**\n     * Export path data\n     */\n    exportPathData() {\n        return {\n            history: this.pathHistory,\n            statistics: this.getPathStatistics(),\n            connectivity: this.analyzeConnectivity(),\n            timestamp: Date.now()\n        };\n    }\n\n    /**\n     * Destroy the path finder\n     */\n    destroy() {\n        this.clearAllPaths();\n        this.clearCache();\n        this.pathHistory = [];\n        console.log('üóëÔ∏è PathFinder destroyed');\n    }\n}\n\nexport default PathFinder;\n"],"names":["GlobalSearch","constructor","containerId","this","container","document","getElementById","querySelector","searchInput","suggestionsContainer","currentSuggestions","selectedSuggestionIndex","isOpen","config","minQueryLength","maxSuggestions","searchDelay","highlightMatches","searchScopes","currentScope","maxCachedResults","virtualScrolling","itemHeight","visibleItems","throttleKeyNav","batchRenderSize","enableMetrics","searchMetrics","searchCount","avgSearchTime","totalSearchTime","cacheHits","lastSearchTime","searchCache","Map","debounceInstances","virtualScrollState","startIndex","endIndex","documentFragment","createDocumentFragment","intersectionObserver","init","setupEventListeners","createSearchInterface","setupSearch","innerHTML","createElement","id","className","setAttribute","style","display","appendChild","addSearchStyles","textContent","head","debouncedSearch","cancellableDebounce","performSearchOptimized","bind","throttledKeyNav","throttle","updateSuggestionSelection","frameBasedRender","frameDebounce","renderSuggestionsOptimized","batchProcessor","batchDebounce","processBatchOperations","updateSearchIndex","setupVirtualScrolling","initPerformanceMonitoring","IntersectionObserver","entries","forEach","entry","isIntersecting","handleVirtualScrollIntersection","target","root","rootMargin","threshold","setInterval","query","length","hideSuggestions","startTime","performance","now","cacheKey","has","get","showSuggestions","searchOptions","searchNodes","searchEdges","limit","results","search","textSearch","suggestions","getSuggestions","map","result","type","data","score","matchedText","suggestion","text","size","set","searchTime","renderVirtualScrollSuggestions","renderBatchedSuggestions","visibleSuggestions","slice","totalHeight","offsetY","renderSuggestionItems","querySelectorAll","item","observe","batchSize","batches","i","push","batchIndex","renderNextBatch","batch","batchFragment","index","actualIndex","itemElement","createSuggestionElement","requestAnimationFrame","icon","getSuggestionIcon","title","getSuggestionTitle","subtitle","getSuggestionSubtitle","typeLabel","getSuggestionTypeLabel","join","div","dataset","height","element","parseInt","Math","max","min","operations","operation","cleanupCache","updateMetrics","Array","from","toRemove","floor","delete","updateSuggestionSelectionThrottled","getPerformanceMetrics","cacheSize","cacheHitRate","round","addEventListener","e","handleSearchInput","value","handleSearchKeydown","showRecentSearches","setTimeout","contains","activeElement","clearBtn","clearSearch","focus","scopeSelect","suggestionItem","closest","selectSuggestion","store","subscribe","key","preventDefault","performDirectSearch","blur","performSearch","renderSuggestions","history","getSearchHistory","isRecent","renderRecentSearches","suggestionsHtml","recentHtml","nodeIcons","faa_stars_terminal","approach_control","faa_eram_terminal","geographic_location","radar_equipment","communication_equipment","default","highlightMatch","name","label","source","parts","replace","address","city","state","regex","RegExp","classList","toggle","setState","selectedNode","highlightSearchResult","selectedEdge","dispatchEvent","CustomEvent","detail","scope","timestamp","Date","addToHistory","updateIndex","getCurrentQuery","setQuery","destroy","AdvancedFilters","activeFilters","filterState","equipmentTypes","dateRange","start","end","severity","locationRegions","connectionCount","customProperties","createFilterInterface","addFilterStyles","loadFilterState","populateSpecificLocations","populatePropertyKeys","loadSavedFilterSets","handleCheckboxFilter","handleDateRangeFilter","handleDatePreset","locationSearch","handleLocationSearch","connectionMin","connectionMax","connectionRange","input","handleConnectionCountFilter","addPropertyBtn","addCustomPropertyFilter","clearAllBtn","clearAllFilters","saveFilterBtn","saveFilterSet","updateFilterSummary","checkbox","filterType","filter","updateArrayFilter","checked","applyFilters","filterKey","includes","v","startInput","endInput","button","days","endDate","startDate","setDate","getDate","toISOString","split","btn","remove","add","specificLocations","nodes","getState","locations","Set","node","location","toLowerCase","minInput","maxInput","rangeSlider","keySelect","operatorSelect","valueInput","filterId","operator","renderCustomPropertyFilters","Object","filterData","removePropertyFilter","filterConfig","buildFilterConfig","filteredData","saveFilterState","edges","properties","createdDate","connections","nodesCount","edgesCount","summary","activeTags","tag","keys","select","prop","cb","prompt","filterSets","getSavedFilterSets","created","localStorage","setItem","JSON","stringify","filterSet","parse","getItem","applyFilterSet","updateUIFromFilterState","sev","deleteFilterSet","confirm","saved","getFilterState","clear","NeighborhoodExplorer","contextMenu","currentNode","exploredNodes","explorationHistory","maxHistorySize","createContextMenu","addExplorerStyles","body","removeChild","hideContextMenu","menuItem","action","handleMenuAction","stopPropagation","handleKeyboardShortcut","nodeElement","showContextMenu","getNodeFromElement","updateExplorationCount","updateContextMenuHeader","event","updateMenuStates","x","pageX","y","pageY","menuRect","getBoundingClientRect","viewportWidth","window","innerWidth","viewportHeight","innerHeight","finalX","finalY","width","left","top","firstItem","nodeIcon","getNodeIcon","nodeName","nodeType","iconElement","nameElement","typeElement","sourceBtn","targetBtn","pathFindingMode","disabled","showNeighborhood","showAllConnected","focusOnNode","hideOthers","filterByType","startPathFinding","endPathFinding","clearPaths","showNodeDetails","analyzeCentrality","exportNeighborhood","clearExploration","hops","neighbors","findConnectedNodes","maxDepth","nodeId","neighborCount","highlightNeighborhood","sourceNode","highlightClass","allConnected","Infinity","connectedNodes","centerAndZoom","visibleNodeIds","n","findPath","targetNode","path","expandedView","degree","twoHopNeighbors","centralityData","closeness","betweenness","calculateBetweennessCentrality","clustering","calculateClusteringCoefficient","neighborhoodSizes","oneHop","twoHop","nodeIds","neighborhoodEdges","edge","exportData","centerNode","metadata","exportedAt","totalNodes","totalEdges","downloadNeighborhoodData","filename","blob","Blob","url","URL","createObjectURL","link","href","download","click","revokeObjectURL","actionMap","a","f","h","t","p","c","s","countElement","getAttribute","find","toString","neighborIds","edgesBetweenNeighbors","possibleEdges","getExplorationHistory","getExploredNodes","PathFinder","algorithms","dijkstra","bfs","breadthFirstSearch","astar","aStar","bidirectional","bidirectionalSearch","currentAlgorithm","pathCache","maxCacheSize","pathHistory","sourceId","targetId","algorithm","options","pathSource","updatePathFindingUI","pathTarget","clearAllPaths","cached","displayPath","pathResult","endTime","cachePathResult","distance","computeTime","weightProperty","maxDistance","graph","buildWeightedGraph","distances","previous","visited","unvisited","current","minDistance","neighbor","weight","altDistance","reconstructPath","maxHops","buildGraph","queue","shift","neighborId","heuristicFunction","nodeMap","heuristic","nodeId1","nodeId2","node1","node2","undefined","sqrt","pow","getConnectionDistance","openSet","closedSet","gScore","fScore","cameFrom","lowestF","tentativeG","forwardQueue","forwardVisited","backwardQueue","backwardVisited","backwardData","reverse","newPath","newDistance","forwardData","findAlternativePaths","maxPaths","diversityThreshold","paths","primaryPath","originalEdges","edgesToRemove","getPathEdges","filteredEdges","some","pathEdge","altPath","isPathDiverse","findAllSimplePaths","maxLength","allPaths","dfs","currentId","pop","sort","b","sourceList","targetList","parseFloat","unshift","abs","existingPaths","existingPath","calculatePathSimilarity","path1","path2","set1","set2","intersection","union","firstKey","next","pathInfo","hasSource","hasTarget","canFindPath","getPathStatistics","historySize","availableAlgorithms","analyzeConnectivity","components","component","componentSizes","comp","largestComponent","density","numComponents","largestComponentRatio","isConnected","setAlgorithm","getPathHistory","clearCache","exportPathData","statistics","connectivity"],"mappings":"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"}