{"version":3,"file":"main-6_B4kAK4.js","sources":["../../src/services/dataLoader.js","../../src/utils/performanceMonitor.js","../../src/main-enhanced.js"],"sourcesContent":["/**\n * Data Loader Service\n * Handles loading and processing of graph data from various sources\n * Optimized for performance with lazy loading and progress tracking\n */\nimport { store } from '../core/store.js';\nimport LoadingSpinner from '../components/LoadingSpinner.js';\n\nexport class DataLoader {\n    constructor() {\n        this.cache = new Map();\n        this.baseUrl = '/data';\n        this.loadingSpinners = new Map();\n        this.abortControllers = new Map();\n        this.progressCallbacks = new Map();\n\n        // Performance monitoring\n        this.loadTimes = new Map();\n        this.cacheHits = 0;\n        this.cacheMisses = 0;\n    }\n\n    /**\n     * Load data from URL with lazy loading and progress tracking\n     */\n    async loadFromUrl(url, options = {}) {\n        const {\n            useCache = true,\n            transform = null,\n            showSpinner = true,\n            container = null,\n            progressCallback = null,\n            abortable = true\n        } = options;\n\n        const loadId = `load_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const startTime = performance.now();\n\n        // Check cache first\n        if (useCache && this.cache.has(url)) {\n            this.cacheHits++;\n            return this.cache.get(url);\n        }\n\n        this.cacheMisses++;\n\n        // Setup spinner if requested\n        let spinner = null;\n        if (showSpinner) {\n            spinner = new LoadingSpinner(container || document.body, {\n                message: 'Loading data...',\n                overlay: true\n            });\n            spinner.show();\n            this.loadingSpinners.set(loadId, spinner);\n        }\n\n        // Setup abort controller if requested\n        let abortController = null;\n        if (abortable) {\n            abortController = new AbortController();\n            this.abortControllers.set(loadId, abortController);\n        }\n\n        try {\n            store.setState({ loading: { ...store.getState().loading, data: true } });\n\n            if (spinner) {\n                spinner.updateMessage('Fetching data...');\n            }\n\n            const response = await fetch(url, {\n                signal: abortController?.signal\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            if (spinner) {\n                spinner.updateMessage('Processing data...');\n            }\n\n            // Handle streamed/chunked responses for large files\n            let data;\n            if (response.headers.get('content-length')) {\n                const contentLength = parseInt(response.headers.get('content-length'));\n                data = await this.readWithProgress(response, contentLength, progressCallback, spinner);\n            } else {\n                data = await response.json();\n            }\n\n            if (spinner) {\n                spinner.updateMessage('Validating data...');\n            }\n\n            // Apply transform if provided\n            if (transform && typeof transform === 'function') {\n                data = transform(data);\n            }\n\n            // Validate data structure\n            const validatedData = this.validateDataStructure(data);\n\n            // Cache the result\n            if (useCache) {\n                this.cache.set(url, validatedData);\n            }\n\n            // Track load time\n            const loadTime = performance.now() - startTime;\n            this.loadTimes.set(url, loadTime);\n\n            if (progressCallback) {\n                progressCallback({\n                    phase: 'complete',\n                    loaded: 100,\n                    total: 100,\n                    loadTime: loadTime\n                });\n            }\n\n            return validatedData;\n\n        } catch (error) {\n            if (error.name === 'AbortError') {\n                console.log('Data loading aborted for:', url);\n                throw new Error('Loading cancelled by user');\n            }\n            console.error('Error loading data from URL:', error);\n            throw error;\n        } finally {\n            // Clean up\n            if (spinner) {\n                spinner.hide();\n                this.loadingSpinners.delete(loadId);\n            }\n\n            if (abortController) {\n                this.abortControllers.delete(loadId);\n            }\n\n            store.setState({ loading: { ...store.getState().loading, data: false } });\n        }\n    }\n\n    /**\n     * Read response with progress tracking\n     */\n    async readWithProgress(response, contentLength, progressCallback, spinner) {\n        const reader = response.body.getReader();\n        const chunks = [];\n        let loaded = 0;\n\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n\n                if (done) {break;}\n\n                chunks.push(value);\n                loaded += value.length;\n\n                const progress = (loaded / contentLength) * 100;\n\n                if (progressCallback) {\n                    progressCallback({\n                        phase: 'downloading',\n                        loaded: loaded,\n                        total: contentLength,\n                        progress: progress\n                    });\n                }\n\n                if (spinner) {\n                    spinner.updateMessage(`Loading data... ${Math.round(progress)}%`);\n                }\n            }\n\n            // Combine chunks and parse JSON\n            const combinedChunks = new Uint8Array(loaded);\n            let position = 0;\n            for (const chunk of chunks) {\n                combinedChunks.set(chunk, position);\n                position += chunk.length;\n            }\n\n            const text = new TextDecoder().decode(combinedChunks);\n            return JSON.parse(text);\n\n        } finally {\n            reader.releaseLock();\n        }\n    }\n\n    /**\n     * Load sample data\n     */\n    async loadSampleData() {\n        try {\n            const data = await this.loadFromUrl(`${this.baseUrl}/sample-data.json`);\n            const relations = await this.loadFromUrl(`${this.baseUrl}/sample-relations.json`);\n\n            return this.mergeSampleData(data, relations);\n        } catch (error) {\n            console.warn('Could not load sample data files, using fallback data');\n            return this.getFallbackData();\n        }\n    }\n\n    /**\n     * Load data from file input\n     */\n    async loadFromFile(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onload = (event) => {\n                try {\n                    const data = JSON.parse(event.target.result);\n                    const validatedData = this.validateDataStructure(data);\n                    resolve(validatedData);\n                } catch (error) {\n                    reject(new Error('Invalid JSON file'));\n                }\n            };\n\n            reader.onerror = () => reject(new Error('Error reading file'));\n            reader.readAsText(file);\n        });\n    }\n\n    /**\n     * Load schema definitions\n     */\n    async loadSchema(schemaType) {\n        try {\n            const schemaUrl = `${this.baseUrl}/schema/${schemaType}.schema.json`;\n            const schema = await this.loadFromUrl(schemaUrl, { useCache: true });\n            return schema;\n        } catch (error) {\n            console.error(`Error loading schema for ${schemaType}:`, error);\n            return null;\n        }\n    }\n\n    /**\n     * Process CSV data and convert to graph format\n     */\n    processCsvData(csvText, config = {}) {\n        const {\n            nodeColumns = ['id', 'label', 'type'],\n            edgeColumns = ['source', 'target', 'label'],\n            delimiter = ',',\n            hasHeaders = true\n        } = config;\n\n        const lines = csvText.split('\\n').filter(line => line.trim());\n        const headers = hasHeaders ? lines.shift().split(delimiter) : null;\n\n        const nodes = [];\n        const edges = [];\n        const nodeSet = new Set();\n\n        lines.forEach((line, index) => {\n            const values = line.split(delimiter).map(v => v.trim().replace(/^\"|\"$/g, ''));\n\n            if (values.length < 2) {return;} // Skip invalid lines\n\n            const record = {};\n            if (headers) {\n                headers.forEach((header, i) => {\n                    record[header.trim()] = values[i] || '';\n                });\n            } else {\n                values.forEach((value, i) => {\n                    record[`col_${i}`] = value;\n                });\n            }\n\n            // Try to extract nodes and edges based on configuration\n            if (this.looksLikeEdgeRecord(record, edgeColumns)) {\n                const edge = this.recordToEdge(record, edgeColumns, index);\n                if (edge) {\n                    edges.push(edge);\n\n                    // Create nodes from edge endpoints if not seen before\n                    [edge.source, edge.target].forEach(nodeId => {\n                        if (!nodeSet.has(nodeId)) {\n                            nodes.push({\n                                id: nodeId,\n                                label: nodeId,\n                                type: 'auto-generated'\n                            });\n                            nodeSet.add(nodeId);\n                        }\n                    });\n                }\n            } else if (this.looksLikeNodeRecord(record, nodeColumns)) {\n                const node = this.recordToNode(record, nodeColumns);\n                if (node && !nodeSet.has(node.id)) {\n                    nodes.push(node);\n                    nodeSet.add(node.id);\n                }\n            }\n        });\n\n        return this.validateDataStructure({ nodes, edges });\n    }\n\n    /**\n     * Merge sample data and relations\n     */\n    mergeSampleData(sampleData, relations) {\n        const nodes = Array.isArray(sampleData) ? sampleData : sampleData.nodes || [];\n        const edges = Array.isArray(relations) ? relations : relations.edges || sampleData.edges || [];\n\n        return this.validateDataStructure({ nodes, edges });\n    }\n\n    /**\n     * Validate data structure\n     */\n    validateDataStructure(data) {\n        if (!data || typeof data !== 'object') {\n            throw new Error('Data must be an object');\n        }\n\n        const { nodes = [], edges = [] } = data;\n\n        if (!Array.isArray(nodes)) {\n            throw new Error('Nodes must be an array');\n        }\n\n        if (!Array.isArray(edges)) {\n            throw new Error('Edges must be an array');\n        }\n\n        // Validate nodes\n        const validatedNodes = nodes.map(node => {\n            if (!node.id) {\n                throw new Error('Each node must have an id');\n            }\n            return {\n                id: node.id,\n                label: node.label || String(node.id),\n                type: node.type || 'default',\n                properties: node.properties || {},\n                position: node.position || { x: 0, y: 0 },\n                ...node\n            };\n        });\n\n        // Validate edges\n        const nodeIds = new Set(validatedNodes.map(n => n.id));\n        const validatedEdges = edges.map(edge => {\n            if (!edge.source || !edge.target) {\n                throw new Error('Each edge must have source and target');\n            }\n\n            if (!nodeIds.has(edge.source) || !nodeIds.has(edge.target)) {\n                throw new Error(`Edge references non-existent node: ${edge.source} -> ${edge.target}`);\n            }\n\n            return {\n                id: edge.id || `${edge.source}-${edge.target}`,\n                source: edge.source,\n                target: edge.target,\n                label: edge.label || '',\n                type: edge.type || 'default',\n                properties: edge.properties || {},\n                ...edge\n            };\n        });\n\n        return {\n            nodes: validatedNodes,\n            edges: validatedEdges,\n            metadata: data.metadata || {}\n        };\n    }\n\n    /**\n     * Check if record looks like an edge\n     */\n    looksLikeEdgeRecord(record, edgeColumns) {\n        return edgeColumns.every(col => record.hasOwnProperty(col) && record[col]);\n    }\n\n    /**\n     * Check if record looks like a node\n     */\n    looksLikeNodeRecord(record, nodeColumns) {\n        return nodeColumns.some(col => record.hasOwnProperty(col) && record[col]);\n    }\n\n    /**\n     * Convert record to edge\n     */\n    recordToEdge(record, edgeColumns, index) {\n        const [sourceCol, targetCol, labelCol] = edgeColumns;\n\n        const source = record[sourceCol];\n        const target = record[targetCol];\n\n        if (!source || !target) {return null;}\n\n        return {\n            id: record.id || `edge_${index}`,\n            source: source,\n            target: target,\n            label: record[labelCol] || '',\n            type: record.type || 'default',\n            properties: { ...record }\n        };\n    }\n\n    /**\n     * Convert record to node\n     */\n    recordToNode(record, nodeColumns) {\n        const [idCol, labelCol, typeCol] = nodeColumns;\n\n        const id = record[idCol];\n        if (!id) {return null;}\n\n        return {\n            id: id,\n            label: record[labelCol] || id,\n            type: record[typeCol] || 'default',\n            properties: { ...record }\n        };\n    }\n\n    /**\n     * Get fallback data when sample files are not available\n     */\n    getFallbackData() {\n        return {\n            nodes: [\n                { id: 1, label: 'NAS Device', type: 'hardware', position: { x: 200, y: 150 } },\n                { id: 2, label: 'RAID Configuration', type: 'concept', position: { x: 400, y: 100 } },\n                { id: 3, label: 'Network Protocol', type: 'protocol', position: { x: 300, y: 250 } },\n                { id: 4, label: 'Storage Pool', type: 'concept', position: { x: 500, y: 200 } },\n                { id: 5, label: 'Backup Strategy', type: 'process', position: { x: 150, y: 300 } }\n            ],\n            edges: [\n                { id: 'e1', source: 1, target: 2, label: 'uses' },\n                { id: 'e2', source: 1, target: 3, label: 'communicates via' },\n                { id: 'e3', source: 2, target: 4, label: 'creates' },\n                { id: 'e4', source: 1, target: 5, label: 'implements' }\n            ],\n            metadata: {\n                source: 'fallback',\n                generated: new Date().toISOString()\n            }\n        };\n    }\n\n    /**\n     * Lazy load sample data with chunking for large datasets\n     */\n    async loadSampleDataLazy(options = {}) {\n        const {\n            chunkSize = 1000,\n            container = null,\n            progressCallback = null\n        } = options;\n\n        const spinner = new LoadingSpinner(container || 'graph-container', {\n            message: 'Loading sample data...',\n            size: 'large'\n        });\n\n        try {\n            spinner.show();\n\n            // Load data in chunks to prevent UI blocking\n            const data = await this.loadFromUrl(`${this.baseUrl}/sample-data.json`, {\n                showSpinner: false, // We're managing our own spinner\n                progressCallback: (progress) => {\n                    if (progressCallback) {progressCallback(progress);}\n                    if (progress.phase === 'downloading') {\n                        spinner.updateMessage(`Loading data... ${Math.round(progress.progress || 0)}%`);\n                    }\n                }\n            });\n\n            const relations = await this.loadFromUrl(`${this.baseUrl}/sample-relations.json`, {\n                showSpinner: false\n            });\n\n            spinner.updateMessage('Processing data...');\n\n            // Process data in chunks to avoid blocking\n            const result = await this.processDataInChunks(\n                this.mergeSampleData(data, relations),\n                chunkSize,\n                spinner\n            );\n\n            return result;\n\n        } catch (error) {\n            console.warn('Could not load sample data files, using fallback data');\n            spinner.updateMessage('Using fallback data...');\n\n            // Even fallback data should be processed in chunks for consistency\n            return await this.processDataInChunks(\n                this.getFallbackData(),\n                chunkSize,\n                spinner\n            );\n        } finally {\n            spinner.hide();\n        }\n    }\n\n    /**\n     * Process data in chunks to avoid blocking the UI\n     */\n    async processDataInChunks(data, chunkSize = 1000, spinner = null) {\n        const { nodes, edges } = data;\n        const processedNodes = [];\n        const processedEdges = [];\n\n        // Process nodes in chunks\n        for (let i = 0; i < nodes.length; i += chunkSize) {\n            const chunk = nodes.slice(i, i + chunkSize);\n\n            // Process chunk\n            await new Promise(resolve => {\n                requestAnimationFrame(() => {\n                    chunk.forEach(node => {\n                        // Add any additional processing here\n                        processedNodes.push({\n                            ...node,\n                            processed: true,\n                            processedAt: Date.now()\n                        });\n                    });\n                    resolve();\n                });\n            });\n\n            if (spinner) {\n                const progress = Math.round(((i + chunkSize) / nodes.length) * 50); // 50% for nodes\n                spinner.updateMessage(`Processing nodes... ${progress}%`);\n            }\n        }\n\n        // Process edges in chunks\n        for (let i = 0; i < edges.length; i += chunkSize) {\n            const chunk = edges.slice(i, i + chunkSize);\n\n            // Process chunk\n            await new Promise(resolve => {\n                requestAnimationFrame(() => {\n                    chunk.forEach(edge => {\n                        // Add any additional processing here\n                        processedEdges.push({\n                            ...edge,\n                            processed: true,\n                            processedAt: Date.now()\n                        });\n                    });\n                    resolve();\n                });\n            });\n\n            if (spinner) {\n                const progress = 50 + Math.round(((i + chunkSize) / edges.length) * 50); // 50% + 50% for edges\n                spinner.updateMessage(`Processing edges... ${progress}%`);\n            }\n        }\n\n        return {\n            nodes: processedNodes,\n            edges: processedEdges,\n            metadata: {\n                ...data.metadata,\n                chunked: true,\n                chunkSize: chunkSize,\n                processedAt: new Date().toISOString()\n            }\n        };\n    }\n\n    /**\n     * Abort all active loading operations\n     */\n    abortAllLoading() {\n        // Abort all fetch requests\n        for (const [loadId, controller] of this.abortControllers) {\n            controller.abort();\n            this.abortControllers.delete(loadId);\n        }\n\n        // Hide all spinners\n        for (const [loadId, spinner] of this.loadingSpinners) {\n            spinner.hide();\n            this.loadingSpinners.delete(loadId);\n        }\n\n        console.log('All loading operations aborted');\n    }\n\n    /**\n     * Get performance statistics\n     */\n    getPerformanceStats() {\n        const totalRequests = this.cacheHits + this.cacheMisses;\n        const cacheHitRate = totalRequests > 0 ? (this.cacheHits / totalRequests) * 100 : 0;\n\n        const loadTimes = Array.from(this.loadTimes.values());\n        const avgLoadTime = loadTimes.length > 0\n            ? loadTimes.reduce((sum, time) => sum + time, 0) / loadTimes.length\n            : 0;\n\n        return {\n            cacheSize: this.cache.size,\n            cacheHits: this.cacheHits,\n            cacheMisses: this.cacheMisses,\n            cacheHitRate: Math.round(cacheHitRate * 100) / 100,\n            totalRequests: totalRequests,\n            averageLoadTime: Math.round(avgLoadTime * 100) / 100,\n            activeLoads: this.loadingSpinners.size,\n            loadTimes: Object.fromEntries(this.loadTimes)\n        };\n    }\n\n    /**\n     * Preload data for better performance\n     */\n    async preloadData(urls = []) {\n        const defaultUrls = [\n            `${this.baseUrl}/sample-data.json`,\n            `${this.baseUrl}/sample-relations.json`\n        ];\n\n        const urlsToLoad = urls.length > 0 ? urls : defaultUrls;\n\n        const preloadPromises = urlsToLoad.map(url =>\n            this.loadFromUrl(url, {\n                useCache: true,\n                showSpinner: false,\n                abortable: true\n            }).catch(error => {\n                console.warn(`Failed to preload ${url}:`, error.message);\n                return null;\n            })\n        );\n\n        const results = await Promise.allSettled(preloadPromises);\n        const successful = results.filter(result => result.status === 'fulfilled' && result.value !== null);\n\n        console.log(`Preloaded ${successful.length}/${urlsToLoad.length} data files`);\n        return successful.map(result => result.value);\n    }\n\n    /**\n     * Clear cache\n     */\n    clearCache() {\n        this.cache.clear();\n        this.loadTimes.clear();\n        this.cacheHits = 0;\n        this.cacheMisses = 0;\n        console.log('Cache cleared');\n    }\n\n    /**\n     * Export data in various formats\n     */\n    exportData(format = 'json') {\n        const { nodes, edges } = store.getState();\n\n        switch (format.toLowerCase()) {\n        case 'json':\n            return JSON.stringify({ nodes, edges }, null, 2);\n        case 'csv':\n            return this.exportToCsv(nodes, edges);\n        case 'cytoscape':\n            return this.exportToCytoscape(nodes, edges);\n        default:\n            throw new Error(`Unsupported export format: ${format}`);\n        }\n    }\n\n    /**\n     * Export to CSV format\n     */\n    exportToCsv(nodes, edges) {\n        const nodesCsv = [\n            'id,label,type,' + Object.keys(nodes[0]?.properties || {}).join(','),\n            ...nodes.map(node =>\n                `${node.id},\"${node.label}\",${node.type},` +\n                Object.values(node.properties || {}).map(v => `\"${v}\"`).join(',')\n            )\n        ].join('\\n');\n\n        const edgesCsv = [\n            'source,target,label,type,' + Object.keys(edges[0]?.properties || {}).join(','),\n            ...edges.map(edge =>\n                `${edge.source},${edge.target},\"${edge.label}\",${edge.type},` +\n                Object.values(edge.properties || {}).map(v => `\"${v}\"`).join(',')\n            )\n        ].join('\\n');\n\n        return `NODES:\\n${nodesCsv}\\n\\nEDGES:\\n${edgesCsv}`;\n    }\n\n    /**\n     * Export to Cytoscape format\n     */\n    exportToCytoscape(nodes, edges) {\n        return JSON.stringify({\n            elements: [\n                ...nodes.map(node => ({\n                    data: { id: node.id, label: node.label, type: node.type, ...node.properties },\n                    position: node.position\n                })),\n                ...edges.map(edge => ({\n                    data: {\n                        id: edge.id,\n                        source: edge.source,\n                        target: edge.target,\n                        label: edge.label,\n                        type: edge.type,\n                        ...edge.properties\n                    }\n                }))\n            ]\n        }, null, 2);\n    }\n}\n\n// Create and export singleton data loader instance\nexport const dataLoader = new DataLoader();\n","/**\n * Performance Monitoring Utility\n * Tracks Core Web Vitals and application-specific metrics\n */\n\nclass PerformanceMonitor {\n    constructor() {\n        this.metrics = new Map();\n        this.observers = new Map();\n        this.isEnabled = true;\n        this.reportingEndpoint = null;\n\n        this.initCustomMetrics();\n        this.setupPerformanceObserver();\n\n        // Report metrics periodically\n        setInterval(() => {\n            this.reportMetrics();\n        }, 60000); // Every minute\n    }\n\n    /**\n     * Initialize custom application metrics\n     */\n    initCustomMetrics() {\n        // Track initial load performance\n        this.trackInitialLoad();\n\n        // Track graph rendering performance\n        this.trackGraphRendering();\n\n        // Track search performance\n        this.trackSearchPerformance();\n\n        // Track memory usage\n        this.trackMemoryUsage();\n    }\n\n    /**\n     * Setup Performance Observer for detailed metrics\n     */\n    setupPerformanceObserver() {\n        if (!('PerformanceObserver' in window)) {return;}\n\n        // Navigation timing\n        const navObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            entries.forEach((entry) => {\n                this.recordMetric('navigation', entry.duration, {\n                    type: entry.type,\n                    loadEventEnd: entry.loadEventEnd,\n                    domContentLoaded: entry.domContentLoadedEventEnd\n                });\n            });\n        });\n\n        try {\n            navObserver.observe({ type: 'navigation', buffered: true });\n        } catch (e) {\n            console.warn('Navigation timing not supported');\n        }\n\n        // Resource timing\n        const resourceObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            entries.forEach((entry) => {\n                if (entry.name.includes('d3') ||\n                    entry.name.includes('sample-data') ||\n                    entry.name.includes('.js') ||\n                    entry.name.includes('.css')) {\n\n                    this.recordMetric('resource-load', entry.duration, {\n                        name: entry.name,\n                        size: entry.transferSize,\n                        type: this.getResourceType(entry.name)\n                    });\n                }\n            });\n        });\n\n        try {\n            resourceObserver.observe({ type: 'resource', buffered: true });\n        } catch (e) {\n            console.warn('Resource timing not supported');\n        }\n\n        // Long tasks\n        const longTaskObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            entries.forEach((entry) => {\n                this.recordMetric('long-task', entry.duration, {\n                    startTime: entry.startTime,\n                    attribution: entry.attribution\n                });\n            });\n        });\n\n        try {\n            longTaskObserver.observe({ type: 'longtask', buffered: true });\n        } catch (e) {\n            console.warn('Long task timing not supported');\n        }\n\n        this.observers.set('navigation', navObserver);\n        this.observers.set('resource', resourceObserver);\n        this.observers.set('longtask', longTaskObserver);\n    }\n\n    /**\n     * Track initial application load\n     */\n    trackInitialLoad() {\n        const startTime = performance.now();\n\n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => {\n                this.recordMetric('dom-ready', performance.now() - startTime);\n            });\n        } else {\n            this.recordMetric('dom-ready', 0);\n        }\n\n        // Track when app is fully initialized\n        window.addEventListener('load', () => {\n            this.recordMetric('app-load', performance.now() - startTime);\n\n            // Track initial paint\n            if ('getEntriesByType' in performance) {\n                const paintEntries = performance.getEntriesByType('paint');\n                paintEntries.forEach((entry) => {\n                    this.recordMetric(`paint-${entry.name}`, entry.startTime);\n                });\n            }\n        });\n    }\n\n    /**\n     * Track graph rendering performance\n     */\n    trackGraphRendering() {\n        // Listen for custom events from graph components\n        document.addEventListener('graph-render-start', (event) => {\n            const startTime = performance.now();\n            event.detail.startTime = startTime;\n        });\n\n        document.addEventListener('graph-render-complete', (event) => {\n            const endTime = performance.now();\n            const startTime = event.detail.startTime;\n\n            if (startTime) {\n                const renderTime = endTime - startTime;\n                this.recordMetric('graph-render', renderTime, {\n                    nodeCount: event.detail.nodeCount,\n                    edgeCount: event.detail.edgeCount,\n                    layoutType: event.detail.layoutType\n                });\n\n                // Check if render time meets performance targets\n                if (renderTime > 2000) { // 2 second target\n                    this.recordMetric('graph-render-slow', renderTime);\n                    console.warn(`Slow graph render: ${renderTime}ms`);\n                }\n            }\n        });\n    }\n\n    /**\n     * Track search performance\n     */\n    trackSearchPerformance() {\n        document.addEventListener('search-start', (event) => {\n            const startTime = performance.now();\n            event.detail.startTime = startTime;\n        });\n\n        document.addEventListener('search-complete', (event) => {\n            const endTime = performance.now();\n            const startTime = event.detail.startTime;\n\n            if (startTime) {\n                const searchTime = endTime - startTime;\n                this.recordMetric('search-performance', searchTime, {\n                    query: event.detail.query,\n                    resultCount: event.detail.resultCount,\n                    scope: event.detail.scope\n                });\n\n                // Track slow searches\n                if (searchTime > 500) { // 500ms threshold\n                    this.recordMetric('search-slow', searchTime);\n                }\n            }\n        });\n    }\n\n    /**\n     * Track memory usage\n     */\n    trackMemoryUsage() {\n        if ('memory' in performance) {\n            setInterval(() => {\n                const memory = performance.memory;\n                this.recordMetric('memory-usage', memory.usedJSHeapSize, {\n                    total: memory.totalJSHeapSize,\n                    limit: memory.jsHeapSizeLimit,\n                    percentage: (memory.usedJSHeapSize / memory.totalJSHeapSize) * 100\n                });\n            }, 30000); // Every 30 seconds\n        }\n    }\n\n    /**\n     * Record a performance metric\n     */\n    recordMetric(name, value, metadata = {}) {\n        if (!this.isEnabled) {return;}\n\n        const timestamp = Date.now();\n        const metric = {\n            name,\n            value,\n            timestamp,\n            url: location.pathname,\n            userAgent: navigator.userAgent,\n            metadata\n        };\n\n        // Store locally\n        if (!this.metrics.has(name)) {\n            this.metrics.set(name, []);\n        }\n\n        this.metrics.get(name).push(metric);\n\n        // Limit stored metrics to prevent memory bloat\n        if (this.metrics.get(name).length > 100) {\n            this.metrics.get(name).shift();\n        }\n\n        // Emit custom event for real-time monitoring\n        document.dispatchEvent(new CustomEvent('performance-metric', {\n            detail: metric\n        }));\n    }\n\n    /**\n     * Get resource type from URL\n     */\n    getResourceType(url) {\n        if (url.includes('.css')) {return 'stylesheet';}\n        if (url.includes('.js')) {return 'script';}\n        if (url.includes('.json')) {return 'data';}\n        if (url.match(/\\.(png|jpg|jpeg|gif|svg|webp)$/)) {return 'image';}\n        if (url.includes('d3js.org')) {return 'library';}\n        return 'other';\n    }\n\n    /**\n     * Get performance summary\n     */\n    getPerformanceSummary() {\n        const summary = {\n            customMetrics: {},\n            resources: {},\n            timestamp: Date.now()\n        };\n\n        // Custom metrics\n        ['graph-render', 'search-performance', 'app-load'].forEach(metric => {\n            const values = this.metrics.get(metric) || [];\n            if (values.length > 0) {\n                const avg = values.reduce((sum, m) => sum + m.value, 0) / values.length;\n                summary.customMetrics[metric] = {\n                    average: avg,\n                    count: values.length,\n                    latest: values[values.length - 1].value\n                };\n            }\n        });\n\n        // Resource performance\n        const resourceMetrics = this.metrics.get('resource-load') || [];\n        const resourceTypes = {};\n\n        resourceMetrics.forEach(metric => {\n            const type = metric.metadata.type;\n            if (!resourceTypes[type]) {\n                resourceTypes[type] = { count: 0, totalTime: 0 };\n            }\n            resourceTypes[type].count++;\n            resourceTypes[type].totalTime += metric.value;\n        });\n\n        Object.keys(resourceTypes).forEach(type => {\n            const data = resourceTypes[type];\n            summary.resources[type] = {\n                count: data.count,\n                averageLoadTime: data.totalTime / data.count\n            };\n        });\n\n        return summary;\n    }\n\n    /**\n     * Report metrics to console\n     */\n    reportMetrics() {\n        const summary = this.getPerformanceSummary();\n\n        console.group('📊 Performance Report');\n        console.log('Custom Metrics:', summary.customMetrics);\n        console.log('Resource Performance:', summary.resources);\n        console.groupEnd();\n    }\n\n    /**\n     * Check if performance targets are met\n     */\n    checkPerformanceTargets() {\n        const targets = {\n            'app-load': 3000, // 3 seconds initial load\n            'graph-render': 2000, // 2 seconds graph render\n            'search-performance': 500 // 500ms search\n        };\n\n        const results = {};\n\n        Object.entries(targets).forEach(([metric, target]) => {\n            const values = this.metrics.get(metric) || [];\n            if (values.length > 0) {\n                const latest = values[values.length - 1].value;\n                results[metric] = {\n                    value: latest,\n                    target: target,\n                    met: latest <= target\n                };\n            }\n        });\n\n        return results;\n    }\n\n    /**\n     * Destroy performance monitor\n     */\n    destroy() {\n        this.observers.forEach(observer => observer.disconnect());\n        this.observers.clear();\n        this.metrics.clear();\n        this.isEnabled = false;\n    }\n}\n\n// Create singleton instance\nconst performanceMonitor = new PerformanceMonitor();\n\n// Export for manual usage\nexport { performanceMonitor, PerformanceMonitor };\n\n// Auto-start monitoring\nif (typeof window !== 'undefined') {\n    window.performanceMonitor = performanceMonitor;\n    console.log('📊 Performance monitoring initialized');\n}\n\nexport default performanceMonitor;\n","/**\n * Enhanced Knowledge Graph Application\n * Main entry point with D3.js integration and advanced features\n */\n\nimport { store } from './core/store.js';\nimport { dataLoader } from './services/dataLoader.js';\nimport D3EnhancedGraphView from './ui/d3-graph-enhanced.js';\nimport { DashboardUI } from './ui/dashboardUI.js';\n\n// Import new data exploration components\nimport GlobalSearch from './components/GlobalSearch.js';\nimport AdvancedFilters from './components/AdvancedFilters.js';\nimport NeighborhoodExplorer from './components/NeighborhoodExplorer.js';\nimport PathFinder from './components/PathFinder.js';\nimport URLStateManager from './utils/urlStateManager.js';\nimport performanceMonitor from './utils/performanceMonitor.js';\n\nclass EnhancedKnowledgeGraphApp {\n    constructor() {\n        this.graphView = null;\n        this.initialized = false;\n        this.currentLayout = 'force';\n        \n        // Data exploration components\n        this.globalSearch = null;\n        this.advancedFilters = null;\n        this.neighborhoodExplorer = null;\n        this.pathFinder = null;\n        this.urlStateManager = null;\n        \n        // Initialize when DOM is ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.init());\n        } else {\n            this.init();\n        }\n    }\n\n    async init() {\n        try {\n            console.log('🚀 Initializing Enhanced Knowledge Graph Application...');\n            \n            // Create enhanced graph view with performance monitoring\n            const graphStartTime = performance.now();\n            document.dispatchEvent(new CustomEvent('graph-render-start', {\n                detail: { startTime: graphStartTime }\n            }));\n            \n            this.graphView = new D3EnhancedGraphView('graph-container');\n            \n            // Setup performance monitoring for graph events\n            this.setupGraphPerformanceMonitoring();\n            \n            // Initialize data exploration components\n            await this.initializeDataExplorationComponents();\n            \n            // Setup UI event handlers\n            this.setupEventHandlers();\n            \n            // Setup store subscriptions for UI updates\n            this.setupStoreSubscriptions();\n            \n            // Load initial data\n            await this.loadInitialData();\n            \n            // Setup component integration\n            this.setupComponentIntegration();\n            \n            // Hide loading indicator\n            this.hideLoadingIndicator();\n            \n            this.initialized = true;\n            console.log('✅ Enhanced Knowledge Graph Application with Data Exploration initialized successfully!');\n            \n        } catch (error) {\n            console.error('❌ Failed to initialize application:', error);\n            this.showError('Failed to initialize application. Please refresh the page.');\n        }\n    }\n\n    /**\n     * Setup UI event handlers\n     */\n    setupEventHandlers() {\n        // Control buttons\n        const resetViewBtn = document.getElementById('reset-view');\n        const fitViewBtn = document.getElementById('fit-view');\n        const expandAllBtn = document.getElementById('expand-all');\n        const collapseAllBtn = document.getElementById('collapse-all');\n        const layoutSelect = document.getElementById('layout-select');\n\n        if (resetViewBtn) {\n            resetViewBtn.addEventListener('click', () => {\n                if (this.graphView && this.graphView.resetView) {\n                    this.graphView.resetView();\n                }\n            });\n        }\n\n        if (fitViewBtn) {\n            fitViewBtn.addEventListener('click', () => {\n                if (this.graphView && this.graphView.fitToView) {\n                    this.graphView.fitToView();\n                }\n            });\n        }\n\n        if (expandAllBtn) {\n            expandAllBtn.addEventListener('click', () => {\n                this.expandAllClusters();\n            });\n        }\n\n        if (collapseAllBtn) {\n            collapseAllBtn.addEventListener('click', () => {\n                this.collapseAllNodes();\n            });\n        }\n\n        if (layoutSelect) {\n            layoutSelect.addEventListener('change', (event) => {\n                this.changeLayout(event.target.value);\n            });\n        }\n\n        // Keyboard shortcuts\n        document.addEventListener('keydown', (event) => {\n            this.handleKeyboardShortcuts(event);\n        });\n\n        // Window resize\n        window.addEventListener('resize', () => {\n            this.handleResize();\n        });\n\n        // Clear selection on background click\n        document.addEventListener('click', (event) => {\n            if (event.target === document.body || event.target.closest('#graph-container')) {\n                // Only clear if clicking on background, not on nodes/edges\n                if (!event.target.closest('.node') && !event.target.closest('.edge')) {\n                    store.setState({ selectedNode: null, selectedEdge: null });\n                }\n            }\n        });\n\n        // Dashboard event listeners\n        this.setupDashboardEventListeners();\n    }\n\n    /**\n     * Setup dashboard event listeners\n     */\n    setupDashboardEventListeners() {\n        // Listen for dashboard events from DashboardUI\n        document.addEventListener('searchGraph', (event) => {\n            this.handleGraphSearch(event.detail.query);\n        });\n\n        document.addEventListener('filtersChanged', (event) => {\n            this.handleFiltersChanged(event.detail);\n        });\n\n        document.addEventListener('rangeChanged', (event) => {\n            this.handleRangeChanged(event.detail.type, event.detail.value);\n        });\n\n        document.addEventListener('graphControl', (event) => {\n            this.handleGraphControl(event.detail.action);\n        });\n\n        document.addEventListener('layoutChange', (event) => {\n            this.changeLayout(event.detail.layout);\n        });\n\n        document.addEventListener('dashboardResize', () => {\n            this.handleResize();\n        });\n    }\n\n    /**\n     * Handle graph search\n     */\n    handleGraphSearch(query) {\n        console.log(`🔍 Searching for: \"${query}\"`);\n        // This would filter/highlight nodes based on the search query\n        if (this.graphView && typeof this.graphView.search === 'function') {\n            this.graphView.search(query);\n        }\n        \n        // Update search results in dashboard\n        const matchingNodes = store.getState().nodes.filter(node => \n            node.name?.toLowerCase().includes(query.toLowerCase()) ||\n            node.label?.toLowerCase().includes(query.toLowerCase()) ||\n            node.id?.toLowerCase().includes(query.toLowerCase())\n        );\n        \n        // Announce results to dashboard UI\n        if (window.dashboardUI) {\n            window.dashboardUI.announceToScreenReader(\n                `Found ${matchingNodes.length} matching nodes`\n            );\n        }\n    }\n\n    /**\n     * Handle filter changes\n     */\n    handleFiltersChanged(filters) {\n        console.log('🔽 Filters changed:', filters);\n        // This would filter the graph based on node types and connections\n        if (this.graphView && typeof this.graphView.applyFilters === 'function') {\n            this.graphView.applyFilters(filters);\n        }\n        \n        // Update store with current filters\n        store.setState({\n            filters: filters\n        });\n    }\n\n    /**\n     * Handle range slider changes\n     */\n    handleRangeChanged(type, value) {\n        console.log(`📊 ${type} changed to: ${value}`);\n        // This would update visual properties of the graph\n        if (this.graphView) {\n            if (type === 'node-size' && typeof this.graphView.setNodeSize === 'function') {\n                this.graphView.setNodeSize(value);\n            }\n            if (type === 'link-strength' && typeof this.graphView.setLinkStrength === 'function') {\n                this.graphView.setLinkStrength(value);\n            }\n        }\n    }\n\n    /**\n     * Handle graph control actions\n     */\n    handleGraphControl(action) {\n        console.log(`🎮 Graph control: ${action}`);\n        switch (action) {\n            case 'resetview':\n                if (this.graphView && this.graphView.resetView) {\n                    this.graphView.resetView();\n                }\n                break;\n            case 'fitview':\n                if (this.graphView && this.graphView.fitToView) {\n                    this.graphView.fitToView();\n                }\n                break;\n            case 'expandall':\n                this.expandAllClusters();\n                break;\n            case 'collapseall':\n                this.collapseAllNodes();\n                break;\n        }\n    }\n\n    /**\n     * Setup store subscriptions for UI updates\n     */\n    setupStoreSubscriptions() {\n        // Update node details panel\n        store.subscribe('selectedNode', (selectedNode) => {\n            this.updateNodeDetailsPanel(selectedNode);\n        });\n\n        // Update statistics\n        store.subscribe('nodes', (nodes) => {\n            this.updateStatistics();\n        });\n\n        store.subscribe('edges', (edges) => {\n            this.updateStatistics();\n        });\n    }\n\n    /**\n     * Load initial sample data with performance optimizations\n     */\n    async loadInitialData() {\n        try {\n            console.log('📊 Loading sample data with optimizations...');\n            \n            // Use optimized lazy loading with spinner and progress tracking\n            const data = await dataLoader.loadSampleDataLazy({\n                chunkSize: 500, // Process in smaller chunks\n                container: 'graph-container',\n                progressCallback: (progress) => {\n                    console.log(`Data loading progress: ${progress.progress || 0}%`);\n                    \n                    // Update loading indicator if available\n                    const loadingElement = document.querySelector('.loading p');\n                    if (loadingElement) {\n                        if (progress.phase === 'downloading') {\n                            loadingElement.textContent = `Downloading data... ${Math.round(progress.progress || 0)}%`;\n                        } else if (progress.phase === 'complete') {\n                            loadingElement.textContent = 'Initializing graph...';\n                        }\n                    }\n                }\n            });\n            \n            console.log(`📊 Data loaded in ${performance.now()}ms`);\n            \n            // Transform data for better visualization with performance monitoring\n            const startTransform = performance.now();\n            const transformedData = this.transformDataForVisualization(data);\n            const transformTime = performance.now() - startTransform;\n            \n            console.log(`🔄 Data transformation took ${transformTime.toFixed(2)}ms`);\n            \n            // Load into store with batching to prevent UI blocking\n            await this.loadDataIntoStore(transformedData);\n            \n            // Log performance metrics\n            console.log(`✅ Loaded ${transformedData.nodes.length} nodes and ${transformedData.edges.length} edges`);\n            console.log('📈 Data Loader Performance:', dataLoader.getPerformanceStats());\n            \n        } catch (error) {\n            console.error('❌ Failed to load initial data:', error);\n            // Load with empty data to prevent crashes\n            store.setState({ nodes: [], edges: [] });\n        }\n    }\n    \n    /**\n     * Load data into store with batching to prevent UI blocking\n     */\n    async loadDataIntoStore(data) {\n        const batchSize = 200;\n        \n        // Load nodes in batches\n        for (let i = 0; i < data.nodes.length; i += batchSize) {\n            await new Promise(resolve => {\n                requestAnimationFrame(() => {\n                    const batch = data.nodes.slice(i, i + batchSize);\n                    const currentNodes = store.getState().nodes || [];\n                    \n                    store.setState({\n                        nodes: [...currentNodes, ...batch]\n                    });\n                    \n                    resolve();\n                });\n            });\n        }\n        \n        // Load edges in batches\n        for (let i = 0; i < data.edges.length; i += batchSize) {\n            await new Promise(resolve => {\n                requestAnimationFrame(() => {\n                    const batch = data.edges.slice(i, i + batchSize);\n                    const currentEdges = store.getState().edges || [];\n                    \n                    store.setState({\n                        edges: [...currentEdges, ...batch]\n                    });\n                    \n                    resolve();\n                });\n            });\n        }\n    }\n\n    /**\n     * Transform data for better visualization\n     */\n    transformDataForVisualization(data) {\n        const nodes = data.nodes.map(node => ({\n            ...node,\n            // Add display name\n            name: node.name || node.label || node.id,\n            // Ensure position properties exist\n            x: node.x || Math.random() * 800,\n            y: node.y || Math.random() * 600\n        }));\n\n        const edges = data.edges.map(edge => ({\n            ...edge,\n            // Ensure edge has proper ID\n            id: edge.id || `${edge.source}-${edge.target}-${edge.type || 'default'}`,\n            // Add display label\n            label: edge.label || edge.type || '',\n            // Ensure source/target are strings\n            source: typeof edge.source === 'object' ? edge.source.id : edge.source,\n            target: typeof edge.target === 'object' ? edge.target.id : edge.target\n        }));\n\n        return { nodes, edges };\n    }\n\n    /**\n     * Update node details panel\n     */\n    updateNodeDetailsPanel(selectedNode) {\n        const nodeDetailsElement = document.getElementById('node-details');\n        if (!nodeDetailsElement) return;\n\n        if (!selectedNode) {\n            nodeDetailsElement.innerHTML = `\n                <div class=\"no-selection\">\n                    <p>🖱️ Click on a node to view details</p>\n                    <p>🖱️ Double-click to expand/cluster</p>\n                    <p>🖱️ Right-click for context menu</p>\n                    <p>🖱️ Drag nodes to reposition</p>\n                    <p>🖱️ Use mouse wheel to zoom</p>\n                </div>\n            `;\n            return;\n        }\n\n        const nodeIcon = this.getNodeIcon(selectedNode.type);\n        const degree = this.getNodeDegree(selectedNode);\n        \n        nodeDetailsElement.innerHTML = `\n            <div class=\"node-details-content\">\n                <div class=\"node-details-header\">\n                    <span class=\"node-icon-large\">${nodeIcon}</span>\n                    <div>\n                        <h4 class=\"node-title\">${selectedNode.name || selectedNode.label || selectedNode.id}</h4>\n                        <p class=\"node-subtitle\">${selectedNode.type || 'Unknown Type'}</p>\n                    </div>\n                </div>\n                <div class=\"node-properties\">\n                    <div class=\"node-property\">\n                        <span class=\"property-label\">ID:</span>\n                        <span class=\"property-value\">${selectedNode.id}</span>\n                    </div>\n                    <div class=\"node-property\">\n                        <span class=\"property-label\">Type:</span>\n                        <span class=\"property-value\">${selectedNode.type || 'Unknown'}</span>\n                    </div>\n                    <div class=\"node-property\">\n                        <span class=\"property-label\">Connections:</span>\n                        <span class=\"property-value\">${degree}</span>\n                    </div>\n                    ${selectedNode.address?.city ? `\n                        <div class=\"node-property\">\n                            <span class=\"property-label\">Location:</span>\n                            <span class=\"property-value\">${selectedNode.address.city}, ${selectedNode.address.state}</span>\n                        </div>\n                    ` : ''}\n                    ${selectedNode.capacity?.equipmentCount ? `\n                        <div class=\"node-property\">\n                            <span class=\"property-label\">Equipment:</span>\n                            <span class=\"property-value\">${selectedNode.capacity.equipmentCount}</span>\n                        </div>\n                    ` : ''}\n                    ${selectedNode.capacity?.personnelCount ? `\n                        <div class=\"node-property\">\n                            <span class=\"property-label\">Personnel:</span>\n                            <span class=\"property-value\">${selectedNode.capacity.personnelCount}</span>\n                        </div>\n                    ` : ''}\n                    ${selectedNode.operatingHours ? `\n                        <div class=\"node-property\">\n                            <span class=\"property-label\">24/7 Operation:</span>\n                            <span class=\"property-value\">${selectedNode.operatingHours['24x7'] ? '✅ Yes' : '❌ No'}</span>\n                        </div>\n                    ` : ''}\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Update statistics panel\n     */\n    updateStatistics() {\n        const state = store.getState();\n        const nodesCount = document.getElementById('nodes-count');\n        const edgesCount = document.getElementById('edges-count');\n        const clustersCount = document.getElementById('clusters-count');\n\n        if (nodesCount) nodesCount.textContent = state.nodes.length || 0;\n        if (edgesCount) edgesCount.textContent = state.edges.length || 0;\n        if (clustersCount) {\n            // Count clusters from graph view if available\n            const clusters = this.graphView?.clusteredNodes?.size || 0;\n            clustersCount.textContent = clusters;\n        }\n    }\n\n    /**\n     * Handle keyboard shortcuts\n     */\n    handleKeyboardShortcuts(event) {\n        if (event.ctrlKey || event.metaKey) {\n            switch (event.key.toLowerCase()) {\n                case 'r':\n                    event.preventDefault();\n                    if (this.graphView && this.graphView.resetView) {\n                        this.graphView.resetView();\n                    }\n                    break;\n                case 'f':\n                    event.preventDefault();\n                    if (this.graphView && this.graphView.fitToView) {\n                        this.graphView.fitToView();\n                    }\n                    break;\n                case 'e':\n                    event.preventDefault();\n                    this.expandAllClusters();\n                    break;\n                case 'c':\n                    event.preventDefault();\n                    this.collapseAllNodes();\n                    break;\n            }\n        }\n\n        if (event.key === 'Escape') {\n            store.setState({ selectedNode: null, selectedEdge: null });\n        }\n    }\n\n    /**\n     * Handle window resize\n     */\n    handleResize() {\n        if (this.graphView && typeof this.graphView.resize === 'function') {\n            const container = document.getElementById('graph-container');\n            if (container) {\n                const rect = container.getBoundingClientRect();\n                this.graphView.resize(rect.width, rect.height);\n            }\n        }\n    }\n\n    /**\n     * Change graph layout\n     */\n    changeLayout(layoutType) {\n        this.currentLayout = layoutType;\n        // This would be implemented in the graph view\n        console.log(`🔄 Changing layout to: ${layoutType}`);\n        \n        // Update store\n        store.setState({\n            graphView: {\n                ...store.getState().graphView,\n                layout: layoutType\n            }\n        });\n    }\n\n    /**\n     * Expand all clusters\n     */\n    expandAllClusters() {\n        console.log('📂 Expanding all clusters...');\n        if (this.graphView && this.graphView.clusteredNodes) {\n            const clusterIds = Array.from(this.graphView.clusteredNodes.keys());\n            clusterIds.forEach(clusterId => {\n                if (typeof this.graphView.expandCluster === 'function') {\n                    this.graphView.expandCluster(clusterId);\n                }\n            });\n        }\n    }\n\n    /**\n     * Collapse all nodes into clusters\n     */\n    collapseAllNodes() {\n        console.log('🗂️ Creating clusters...');\n        // This would implement automatic clustering algorithm\n        if (this.graphView && typeof this.graphView.autoCluster === 'function') {\n            this.graphView.autoCluster();\n        }\n    }\n\n    /**\n     * Hide loading indicator\n     */\n    hideLoadingIndicator() {\n        const loadingElement = document.querySelector('.loading');\n        if (loadingElement) {\n            loadingElement.style.opacity = '0';\n            setTimeout(() => {\n                loadingElement.style.display = 'none';\n            }, 300);\n        }\n    }\n\n    /**\n     * Show error message\n     */\n    showError(message) {\n        const container = document.getElementById('graph-container');\n        if (container) {\n            container.innerHTML = `\n                <div style=\"display: flex; align-items: center; justify-content: center; height: 100%; color: #e74c3c; text-align: center; padding: 20px;\">\n                    <div>\n                        <h3>❌ Error</h3>\n                        <p>${message}</p>\n                        <button onclick=\"location.reload()\" style=\"margin-top: 15px; padding: 10px 20px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n                            Refresh Page\n                        </button>\n                    </div>\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * Utility methods\n     */\n    getNodeIcon(type) {\n        const icons = {\n            'faa_stars_terminal': '🏢',\n            'approach_control': '🛫',\n            'faa_eram_terminal': '📡',\n            'geographic_location': '📍',\n            'radar_equipment': '📊',\n            'communication_equipment': '📻',\n            'default': '◉'\n        };\n        return icons[type] || icons.default;\n    }\n\n    getNodeDegree(node) {\n        const state = store.getState();\n        return state.edges.filter(edge => \n            edge.source === node.id || edge.target === node.id\n        ).length;\n    }\n\n    /**\n     * Initialize data exploration components\n     */\n    async initializeDataExplorationComponents() {\n        console.log('🔍 Initializing data exploration components...');\n        \n        try {\n            // Initialize global search\n            this.globalSearch = new GlobalSearch('.header-center');\n            \n            // Initialize advanced filters\n            this.advancedFilters = new AdvancedFilters('.sidebar-filters');\n            \n            // Initialize neighborhood explorer (context menu)\n            this.neighborhoodExplorer = new NeighborhoodExplorer();\n            \n            // Initialize path finder\n            this.pathFinder = new PathFinder();\n            \n            // Initialize URL state manager\n            this.urlStateManager = new URLStateManager();\n            \n            console.log('✅ Data exploration components initialized');\n        } catch (error) {\n            console.error('❌ Failed to initialize data exploration components:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Setup component integration and event handling\n     */\n    setupComponentIntegration() {\n        console.log('🔗 Setting up component integration...');\n        \n        // Global search integration\n        document.addEventListener('globalSearch', (e) => {\n            this.handleGlobalSearch(e.detail);\n        });\n        \n        document.addEventListener('globalSearchClear', () => {\n            this.clearSearchHighlights();\n        });\n        \n        // Advanced filters integration\n        document.addEventListener('filtersApplied', (e) => {\n            this.handleAdvancedFilters(e.detail);\n        });\n        \n        // Neighborhood explorer integration\n        document.addEventListener('showNeighborhood', (e) => {\n            this.handleNeighborhoodExploration(e.detail);\n        });\n        \n        document.addEventListener('showAllConnected', (e) => {\n            this.handleShowAllConnected(e.detail);\n        });\n        \n        document.addEventListener('focusOnNode', (e) => {\n            this.handleFocusOnNode(e.detail);\n        });\n        \n        document.addEventListener('hideOtherNodes', (e) => {\n            this.handleHideOtherNodes(e.detail);\n        });\n        \n        document.addEventListener('filterByNodeType', (e) => {\n            this.handleFilterByNodeType(e.detail);\n        });\n        \n        // Path finder integration\n        document.addEventListener('showShortestPath', (e) => {\n            this.handleShowShortestPath(e.detail);\n        });\n        \n        document.addEventListener('pathNotFound', (e) => {\n            this.handlePathNotFound(e.detail);\n        });\n        \n        document.addEventListener('clearAllPaths', () => {\n            this.clearPathHighlights();\n        });\n        \n        // URL state integration\n        document.addEventListener('urlCopied', (e) => {\n            this.showNotification('URL copied to clipboard!', 'success');\n        });\n        \n        console.log('✅ Component integration setup complete');\n    }\n\n    /**\n     * Handle global search events\n     */\n    handleGlobalSearch(detail) {\n        const { query, scope } = detail;\n        \n        if (this.graphView && typeof this.graphView.highlightSearch === 'function') {\n            this.graphView.highlightSearch(query, scope);\n        }\n        \n        console.log(`🔍 Global search: \"${query}\" in scope: ${scope}`);\n    }\n\n    /**\n     * Handle advanced filter events\n     */\n    handleAdvancedFilters(detail) {\n        const { filteredData, filterState } = detail;\n        \n        if (this.graphView && typeof this.graphView.applyAdvancedFilters === 'function') {\n            this.graphView.applyAdvancedFilters(filteredData);\n        }\n        \n        console.log('🔽 Applied advanced filters:', filterState);\n    }\n\n    /**\n     * Handle neighborhood exploration\n     */\n    handleNeighborhoodExploration(detail) {\n        const { sourceNode, neighbors, hops, highlightClass } = detail;\n        \n        if (this.graphView && typeof this.graphView.highlightNeighborhood === 'function') {\n            this.graphView.highlightNeighborhood(sourceNode, neighbors, highlightClass);\n        }\n        \n        // Update info panel\n        this.showNeighborhoodInfo(sourceNode, neighbors, hops);\n        \n        console.log(`🌐 Neighborhood exploration: ${hops}-hop from ${sourceNode.name || sourceNode.id}`);\n    }\n\n    /**\n     * Handle show all connected nodes\n     */\n    handleShowAllConnected(detail) {\n        const { sourceNode, connectedNodes } = detail;\n        \n        if (this.graphView && typeof this.graphView.highlightConnectedComponent === 'function') {\n            this.graphView.highlightConnectedComponent(sourceNode, connectedNodes);\n        }\n        \n        this.showConnectedComponentInfo(sourceNode, connectedNodes);\n        \n        console.log(`🌐 Showing all connected: ${connectedNodes.length} nodes`);\n    }\n\n    /**\n     * Handle focus on node\n     */\n    handleFocusOnNode(detail) {\n        const { node, centerAndZoom } = detail;\n        \n        if (this.graphView && typeof this.graphView.focusOnNode === 'function') {\n            this.graphView.focusOnNode(node, centerAndZoom);\n        }\n        \n        // Update selection\n        store.setState({ selectedNode: node });\n        \n        console.log(`🎯 Focused on node: ${node.name || node.id}`);\n    }\n\n    /**\n     * Handle hide other nodes\n     */\n    handleHideOtherNodes(detail) {\n        const { visibleNodeIds, sourceNode } = detail;\n        \n        if (this.graphView && typeof this.graphView.hideOtherNodes === 'function') {\n            this.graphView.hideOtherNodes(visibleNodeIds);\n        }\n        \n        console.log(`👁️ Hiding others, showing ${visibleNodeIds.size} nodes`);\n    }\n\n    /**\n     * Handle filter by node type\n     */\n    handleFilterByNodeType(detail) {\n        const { nodeType, sourceNode } = detail;\n        \n        if (this.advancedFilters) {\n            // Trigger filter update in advanced filters component\n            document.dispatchEvent(new CustomEvent('setTypeFilter', {\n                detail: { nodeType }\n            }));\n        }\n        \n        console.log(`🔧 Filtering by node type: ${nodeType}`);\n    }\n\n    /**\n     * Handle shortest path display\n     */\n    handleShowShortestPath(detail) {\n        const { path, distance, algorithm, sourceId, targetId } = detail;\n        \n        if (this.graphView && typeof this.graphView.highlightPath === 'function') {\n            this.graphView.highlightPath(path, 'shortest-path');\n        }\n        \n        // Show path info\n        this.showPathInfo(path, distance, algorithm, sourceId, targetId);\n        \n        console.log(`🛣️ Shortest path: ${path.length} nodes, distance: ${distance}`);\n    }\n\n    /**\n     * Handle path not found\n     */\n    handlePathNotFound(detail) {\n        const { sourceId, targetId, algorithm } = detail;\n        \n        this.showNotification(\n            `No path found between nodes using ${algorithm}`, \n            'warning'\n        );\n        \n        console.log(`❌ No path found: ${sourceId} → ${targetId}`);\n    }\n\n    /**\n     * Clear search highlights\n     */\n    clearSearchHighlights() {\n        if (this.graphView && typeof this.graphView.clearSearchHighlights === 'function') {\n            this.graphView.clearSearchHighlights();\n        }\n    }\n\n    /**\n     * Clear path highlights\n     */\n    clearPathHighlights() {\n        if (this.graphView && typeof this.graphView.clearPathHighlights === 'function') {\n            this.graphView.clearPathHighlights();\n        }\n    }\n\n    /**\n     * Show neighborhood information\n     */\n    showNeighborhoodInfo(sourceNode, neighbors, hops) {\n        const infoPanel = document.getElementById('analysis-content');\n        if (infoPanel) {\n            const infoHtml = `\n                <div class=\"neighborhood-info\">\n                    <h4>🌐 ${hops}-Hop Neighborhood</h4>\n                    <div class=\"info-item\">\n                        <span class=\"info-label\">Center Node:</span>\n                        <span class=\"info-value\">${sourceNode.name || sourceNode.id}</span>\n                    </div>\n                    <div class=\"info-item\">\n                        <span class=\"info-label\">Neighbors:</span>\n                        <span class=\"info-value\">${neighbors.length}</span>\n                    </div>\n                    <div class=\"info-item\">\n                        <span class=\"info-label\">Hops:</span>\n                        <span class=\"info-value\">${hops}</span>\n                    </div>\n                </div>\n            `;\n            infoPanel.innerHTML += infoHtml;\n        }\n    }\n\n    /**\n     * Show connected component information\n     */\n    showConnectedComponentInfo(sourceNode, connectedNodes) {\n        const infoPanel = document.getElementById('analysis-content');\n        if (infoPanel) {\n            const infoHtml = `\n                <div class=\"component-info\">\n                    <h4>🌐 Connected Component</h4>\n                    <div class=\"info-item\">\n                        <span class=\"info-label\">Source Node:</span>\n                        <span class=\"info-value\">${sourceNode.name || sourceNode.id}</span>\n                    </div>\n                    <div class=\"info-item\">\n                        <span class=\"info-label\">Connected Nodes:</span>\n                        <span class=\"info-value\">${connectedNodes.length}</span>\n                    </div>\n                </div>\n            `;\n            infoPanel.innerHTML += infoHtml;\n        }\n    }\n\n    /**\n     * Show path information\n     */\n    showPathInfo(path, distance, algorithm, sourceId, targetId) {\n        const infoPanel = document.getElementById('analysis-content');\n        if (infoPanel) {\n            const infoHtml = `\n                <div class=\"path-info\">\n                    <h4>🛣️ Shortest Path</h4>\n                    <div class=\"info-item\">\n                        <span class=\"info-label\">Algorithm:</span>\n                        <span class=\"info-value\">${algorithm.toUpperCase()}</span>\n                    </div>\n                    <div class=\"info-item\">\n                        <span class=\"info-label\">Path Length:</span>\n                        <span class=\"info-value\">${path.length} nodes</span>\n                    </div>\n                    <div class=\"info-item\">\n                        <span class=\"info-label\">Distance:</span>\n                        <span class=\"info-value\">${distance.toFixed(2)}</span>\n                    </div>\n                    <div class=\"info-item\">\n                        <span class=\"info-label\">Path:</span>\n                        <span class=\"info-value\">${path.join(' → ')}</span>\n                    </div>\n                </div>\n            `;\n            infoPanel.innerHTML += infoHtml;\n        }\n    }\n\n    /**\n     * Show notification to user\n     */\n    showNotification(message, type = 'info', duration = 3000) {\n        // Create notification element\n        const notification = document.createElement('div');\n        notification.className = `notification notification-${type}`;\n        notification.innerHTML = `\n            <div class=\"notification-content\">\n                <span class=\"notification-icon\">${this.getNotificationIcon(type)}</span>\n                <span class=\"notification-message\">${message}</span>\n                <button class=\"notification-close\">×</button>\n            </div>\n        `;\n        \n        // Style the notification\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: ${this.getNotificationColor(type)};\n            color: white;\n            padding: 16px 20px;\n            border-radius: 8px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n            z-index: 10000;\n            opacity: 0;\n            transform: translateX(100%);\n            transition: all 0.3s ease;\n            max-width: 400px;\n            font-family: system-ui, sans-serif;\n        `;\n        \n        // Add to page\n        document.body.appendChild(notification);\n        \n        // Animate in\n        requestAnimationFrame(() => {\n            notification.style.opacity = '1';\n            notification.style.transform = 'translateX(0)';\n        });\n        \n        // Handle close button\n        const closeBtn = notification.querySelector('.notification-close');\n        closeBtn.addEventListener('click', () => {\n            this.hideNotification(notification);\n        });\n        \n        // Auto-hide after duration\n        if (duration > 0) {\n            setTimeout(() => {\n                this.hideNotification(notification);\n            }, duration);\n        }\n    }\n\n    /**\n     * Hide notification\n     */\n    hideNotification(notification) {\n        notification.style.opacity = '0';\n        notification.style.transform = 'translateX(100%)';\n        \n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n            }\n        }, 300);\n    }\n\n    /**\n     * Get notification icon based on type\n     */\n    getNotificationIcon(type) {\n        const icons = {\n            'info': 'ℹ️',\n            'success': '✅',\n            'warning': '⚠️',\n            'error': '❌'\n        };\n        return icons[type] || icons.info;\n    }\n\n    /**\n     * Get notification color based on type\n     */\n    getNotificationColor(type) {\n        const colors = {\n            'info': '#3498db',\n            'success': '#2ecc71',\n            'warning': '#f39c12',\n            'error': '#e74c3c'\n        };\n        return colors[type] || colors.info;\n    }\n\n    /**\n     * Get data exploration components\n     */\n    getDataExplorationComponents() {\n        return {\n            globalSearch: this.globalSearch,\n            advancedFilters: this.advancedFilters,\n            neighborhoodExplorer: this.neighborhoodExplorer,\n            pathFinder: this.pathFinder,\n            urlStateManager: this.urlStateManager\n        };\n    }\n\n    /**\n     * Public API methods\n     */\n    getGraphView() {\n        return this.graphView;\n    }\n\n    isInitialized() {\n        return this.initialized;\n    }\n\n    getState() {\n        return {\n            initialized: this.initialized,\n            currentLayout: this.currentLayout,\n            store: store.getState(),\n            dataExploration: this.getDataExplorationComponents()\n        };\n    }\n\n    /**\n     * Setup graph performance monitoring\n     */\n    setupGraphPerformanceMonitoring() {\n        // Listen for graph render completion from D3 enhanced view\n        document.addEventListener('graph-render-complete', (event) => {\n            const { nodeCount, edgeCount, renderTime, layoutType } = event.detail;\n            \n            console.log(`📊 Graph rendered: ${nodeCount} nodes, ${edgeCount} edges in ${renderTime?.toFixed(2)}ms`);\n            \n            // Record performance metric\n            performanceMonitor.recordMetric('graph-render', renderTime, {\n                nodeCount,\n                edgeCount,\n                layoutType: layoutType || this.currentLayout\n            });\n            \n            // Check if performance target is met (2 seconds)\n            if (renderTime > 2000) {\n                console.warn(`⚠️ Graph render exceeded target: ${renderTime}ms > 2000ms`);\n                this.showNotification(\n                    `Graph rendering took ${(renderTime/1000).toFixed(1)}s (target: 2s)`, \n                    'warning'\n                );\n            }\n        });\n        \n        // Monitor search performance\n        document.addEventListener('search-start', (event) => {\n            event.detail.startTime = performance.now();\n        });\n        \n        document.addEventListener('search-complete', (event) => {\n            const searchTime = performance.now() - event.detail.startTime;\n            \n            performanceMonitor.recordMetric('search-performance', searchTime, {\n                query: event.detail.query,\n                resultCount: event.detail.resultCount,\n                scope: event.detail.scope\n            });\n            \n            // Check search performance target (500ms)\n            if (searchTime > 500) {\n                console.warn(`⚠️ Search exceeded target: ${searchTime}ms > 500ms`);\n            }\n        });\n        \n        // Monitor data loading performance\n        document.addEventListener('data-load-start', (event) => {\n            event.detail.startTime = performance.now();\n        });\n        \n        document.addEventListener('data-load-complete', (event) => {\n            const loadTime = performance.now() - event.detail.startTime;\n            \n            performanceMonitor.recordMetric('data-load', loadTime, {\n                source: event.detail.source,\n                size: event.detail.size,\n                cached: event.detail.cached || false\n            });\n        });\n        \n        // Setup periodic performance reporting\n        setInterval(() => {\n            const targets = performanceMonitor.checkPerformanceTargets();\n            \n            // Log performance summary\n            console.group('📈 Performance Summary');\n            Object.entries(targets).forEach(([metric, data]) => {\n                const status = data.met ? '✅' : '❌';\n                console.log(`${status} ${metric}: ${data.value?.toFixed(2)}ms (target: ${data.target}ms)`);\n            });\n            console.groupEnd();\n            \n            // Show warnings for consistently poor performance\n            const failedTargets = Object.entries(targets)\n                .filter(([_, data]) => !data.met && data.value > data.target * 1.5)\n                .map(([metric]) => metric);\n                \n            if (failedTargets.length > 0) {\n                console.warn(`⚠️ Consistently poor performance in: ${failedTargets.join(', ')}`);\n            }\n        }, 60000); // Check every minute\n        \n        console.log('📊 Graph performance monitoring setup complete');\n    }\n}\n\n// Initialize the application\nconst app = new EnhancedKnowledgeGraphApp();\n\n// Make it globally accessible for debugging\nwindow.knowledgeGraphApp = app;\n\n// Export for module usage\nexport default app;\n"],"names":["dataLoader","constructor","this","cache","Map","baseUrl","loadingSpinners","abortControllers","progressCallbacks","loadTimes","cacheHits","cacheMisses","loadFromUrl","url","options","useCache","transform","showSpinner","container","progressCallback","abortable","loadId","Date","now","Math","random","toString","substr","startTime","performance","has","get","spinner","LoadingSpinner","document","body","message","overlay","show","set","abortController","AbortController","store","setState","loading","getState","data","updateMessage","response","fetch","signal","ok","Error","status","headers","contentLength","parseInt","readWithProgress","json","validatedData","validateDataStructure","loadTime","phase","loaded","total","error","name","hide","delete","reader","getReader","chunks","done","value","read","push","length","progress","round","combinedChunks","Uint8Array","position","chunk","text","TextDecoder","decode","JSON","parse","releaseLock","loadSampleData","relations","mergeSampleData","getFallbackData","loadFromFile","file","Promise","resolve","reject","FileReader","onload","event","target","result","onerror","readAsText","loadSchema","schemaType","schemaUrl","processCsvData","csvText","config","nodeColumns","edgeColumns","delimiter","hasHeaders","lines","split","filter","line","trim","shift","nodes","edges","nodeSet","Set","forEach","index","values","map","v","replace","record","header","i","looksLikeEdgeRecord","edge","recordToEdge","source","nodeId","id","label","type","add","looksLikeNodeRecord","node","recordToNode","sampleData","Array","isArray","validatedNodes","String","properties","x","y","nodeIds","n","metadata","every","col","hasOwnProperty","some","sourceCol","targetCol","labelCol","idCol","typeCol","generated","toISOString","loadSampleDataLazy","chunkSize","size","processDataInChunks","processedNodes","processedEdges","slice","requestAnimationFrame","processed","processedAt","chunked","abortAllLoading","controller","abort","getPerformanceStats","totalRequests","cacheHitRate","from","avgLoadTime","reduce","sum","time","cacheSize","averageLoadTime","activeLoads","Object","fromEntries","preloadData","urls","defaultUrls","preloadPromises","catch","allSettled","clearCache","clear","exportData","format","toLowerCase","stringify","exportToCsv","exportToCytoscape","keys","join","elements","performanceMonitor","metrics","observers","isEnabled","reportingEndpoint","initCustomMetrics","setupPerformanceObserver","setInterval","reportMetrics","trackInitialLoad","trackGraphRendering","trackSearchPerformance","trackMemoryUsage","window","navObserver","PerformanceObserver","list","getEntries","entry","recordMetric","duration","loadEventEnd","domContentLoaded","domContentLoadedEventEnd","observe","buffered","e","resourceObserver","includes","transferSize","getResourceType","longTaskObserver","attribution","readyState","addEventListener","getEntriesByType","detail","endTime","renderTime","nodeCount","edgeCount","layoutType","searchTime","query","resultCount","scope","memory","usedJSHeapSize","totalJSHeapSize","limit","jsHeapSizeLimit","percentage","metric","timestamp","location","pathname","userAgent","navigator","dispatchEvent","CustomEvent","match","getPerformanceSummary","summary","customMetrics","resources","avg","m","average","count","latest","resourceMetrics","resourceTypes","totalTime","checkPerformanceTargets","results","entries","met","destroy","observer","disconnect","app","graphView","initialized","currentLayout","globalSearch","advancedFilters","neighborhoodExplorer","pathFinder","urlStateManager","init","graphStartTime","D3EnhancedGraphView","setupGraphPerformanceMonitoring","initializeDataExplorationComponents","setupEventHandlers","setupStoreSubscriptions","loadInitialData","setupComponentIntegration","hideLoadingIndicator","showError","resetViewBtn","getElementById","fitViewBtn","expandAllBtn","collapseAllBtn","layoutSelect","resetView","fitToView","expandAllClusters","collapseAllNodes","changeLayout","handleKeyboardShortcuts","handleResize","closest","selectedNode","selectedEdge","setupDashboardEventListeners","handleGraphSearch","handleFiltersChanged","handleRangeChanged","handleGraphControl","action","layout","search","matchingNodes","dashboardUI","announceToScreenReader","filters","applyFilters","setNodeSize","setLinkStrength","subscribe","updateNodeDetailsPanel","updateStatistics","loadingElement","querySelector","textContent","startTransform","transformedData","transformDataForVisualization","loadDataIntoStore","batchSize","batch","currentNodes","currentEdges","nodeDetailsElement","innerHTML","nodeIcon","getNodeIcon","degree","getNodeDegree","address","city","state","capacity","equipmentCount","personnelCount","operatingHours","nodesCount","edgesCount","clustersCount","clusters","clusteredNodes","ctrlKey","metaKey","key","preventDefault","resize","rect","getBoundingClientRect","width","height","clusterId","expandCluster","autoCluster","style","opacity","setTimeout","display","icons","faa_stars_terminal","approach_control","faa_eram_terminal","geographic_location","radar_equipment","communication_equipment","default","GlobalSearch","AdvancedFilters","NeighborhoodExplorer","PathFinder","URLStateManager","handleGlobalSearch","clearSearchHighlights","handleAdvancedFilters","handleNeighborhoodExploration","handleShowAllConnected","handleFocusOnNode","handleHideOtherNodes","handleFilterByNodeType","handleShowShortestPath","handlePathNotFound","clearPathHighlights","showNotification","highlightSearch","filteredData","filterState","applyAdvancedFilters","sourceNode","neighbors","hops","highlightClass","highlightNeighborhood","showNeighborhoodInfo","connectedNodes","highlightConnectedComponent","showConnectedComponentInfo","centerAndZoom","focusOnNode","visibleNodeIds","hideOtherNodes","nodeType","path","distance","algorithm","sourceId","targetId","highlightPath","showPathInfo","infoPanel","infoHtml","toUpperCase","toFixed","notification","createElement","className","getNotificationIcon","cssText","getNotificationColor","appendChild","hideNotification","parentNode","removeChild","info","success","warning","colors","getDataExplorationComponents","getGraphView","isInitialized","dataExploration","cached","targets","_","knowledgeGraphApp"],"mappings":"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"}