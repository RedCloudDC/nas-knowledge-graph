const e="static-assets-v1.2",t="dynamic-content-v1.2",n="api-responses-v1.2",s=["/","/index.html","/assets/styles.css","/src/main-enhanced.js","/src/core/store.js","/src/core/graph.js","/src/utils/debounce.js","/data/sample-data.json","/data/sample-relations.json","https://d3js.org/d3.v7.min.js"],a=["/data/","/api/"],c="cache-first",i="network-first",o="stale-while-revalidate",r="cache-only";let l={cacheHits:0,cacheMisses:0,networkRequests:0,averageResponseTime:0,totalResponseTime:0};async function h(s){const a=[e,t,n];for(const e of a){const t=await caches.open(e),n=await t.match(s);if(n)return n}return null}async function u(e,t){const n=await fetch(e);if(200===n.status){const s=await caches.open(t);await s.put(e,n.clone())}return n}self.addEventListener("install",t=>{t.waitUntil(caches.open(e).then(e=>e.addAll(s.map(e=>new Request(e,{credentials:"same-origin"})))).then(()=>self.skipWaiting()).catch(e=>{}))}),self.addEventListener("activate",s=>{s.waitUntil(caches.keys().then(s=>Promise.all(s.map(s=>{if(s!==e&&s!==t&&s!==n)return caches.delete(s)}))).then(()=>self.clients.claim()).catch(e=>{}))}),self.addEventListener("fetch",s=>{const f=s.request,p=new URL(f.url);if("GET"!==f.method||"chrome-extension:"===p.protocol)return;let w=function(e){const t=new URL(e.url),n=t.pathname;if(n.match(/\.(css|js|png|jpg|jpeg|gif|svg|woff2?|ttf|eot)$/))return c;if(n.endsWith(".html")||"/"===n)return i;if(a.some(e=>n.startsWith(e)))return o;if(n.startsWith("/data/")&&n.endsWith(".json"))return o;return i}(f);s.respondWith(async function(s,a){switch(performance.now(),a){case c:return await async function(t){const n=await h(t);if(n)return l.cacheHits++,n;const s=await u(t,e);return l.cacheMisses++,l.networkRequests++,s}(s);case i:return await async function(e){try{const n=await u(e,t);return l.networkRequests++,n}catch(n){const t=await h(e);if(t)return l.cacheHits++,t;throw n}}(s);case o:return await async function(e){const t=h(e),s=u(e,n).then(()=>{l.networkRequests++}).catch(e=>{}),a=await t;if(a)return l.cacheHits++,a;try{const e=await s;return l.cacheMisses++,e}catch(c){throw c}}(s);case r:return await async function(e){const t=await h(e);if(t)return l.cacheHits++,t;throw new Error("No cached response available")}(s);default:return await async function(e){return l.networkRequests++,await fetch(e)}(s)}}(f,w).then(e=>(function(){const e=performance.now()-Date.now();l.totalResponseTime+=e;const t=l.cacheHits+l.cacheMisses+l.networkRequests;t>0&&(l.averageResponseTime=l.totalResponseTime/t)}(),e)).catch(e=>function(e){if(new URL(e.url),e.headers.get("accept")?.includes("text/html"))return new Response('\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Offline - NAS Knowledge Graph</title>\n          <style>\n            body { \n              font-family: system-ui, sans-serif; \n              text-align: center; \n              padding: 2rem; \n              color: #333; \n            }\n            .offline-icon { \n              font-size: 4rem; \n              margin-bottom: 1rem; \n            }\n          </style>\n        </head>\n        <body>\n          <div class="offline-icon">ðŸ“¡</div>\n          <h1>You\'re Offline</h1>\n          <p>The NAS Knowledge Graph is not available right now.</p>\n          <p>Please check your connection and try again.</p>\n          <button onclick="location.reload()">Retry</button>\n        </body>\n      </html>\n    ',{status:200,headers:{"Content-Type":"text/html"}});if(e.headers.get("accept")?.includes("application/json"))return new Response(JSON.stringify({error:"Offline",message:"This content is not available offline"}),{status:503,headers:{"Content-Type":"application/json"}});return new Response("Service Unavailable",{status:503})}(f)))}),self.addEventListener("message",e=>{const{type:n,payload:s}=e.data;switch(n){case"GET_PERFORMANCE_STATS":e.ports[0].postMessage(l);break;case"CLEAR_CACHE":(async function(e){if(e)return await caches.delete(e);{const e=await caches.keys();return await Promise.all(e.map(e=>caches.delete(e)))}})(s.cacheName).then(()=>{e.ports[0].postMessage({success:!0})}).catch(t=>{e.ports[0].postMessage({error:t.message})});break;case"PRECACHE_URLS":(async function(e){const n=await caches.open(t);return await Promise.all(e.map(async e=>{try{const t=await fetch(e);t.ok&&await n.put(e,t)}catch(t){}}))})(s.urls).then(()=>{e.ports[0].postMessage({success:!0})}).catch(t=>{e.ports[0].postMessage({error:t.message})})}}),self.addEventListener("periodicsync",e=>{"cleanup-cache"===e.tag&&e.waitUntil(async function(){const e=6048e5,s=Date.now(),a=[t,n];for(const t of a){const n=await caches.open(t),a=await n.keys();for(const t of a){const a=(await n.match(t)).headers.get("date");if(a){s-new Date(a).getTime()>e&&await n.delete(t)}}}}())});
//# sourceMappingURL=sw-PkmXUov2.js.map
